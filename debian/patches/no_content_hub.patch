diff --git a/configure.ac b/configure.ac
index 6628e218f4..dbeed73235 100644
--- a/configure.ac
+++ b/configure.ac
@@ -464,7 +464,7 @@ else
   AM_CONDITIONAL(USE_WAYLAND, false)
 fi
 
-MIR_DEPENDENCIES="mirclient >= mirclient_required_version mircookie >= mircookie_required_version libcontent-hub-glib"
+MIR_DEPENDENCIES="mirclient >= mirclient_required_version mircookie >= mircookie_required_version"
 if test "$enable_mir_backend" = "maybe" ; then
   PKG_CHECK_EXISTS($MIR_DEPENDENCIES, [have_mir_deps=yes], [have_mir_deps=no])
   AC_MSG_CHECKING([for MIR_DEPENDENCIES])
diff --git a/gdk/mir/gdkmir-private.h b/gdk/mir/gdkmir-private.h
index e726703b21..6decb0c310 100644
--- a/gdk/mir/gdkmir-private.h
+++ b/gdk/mir/gdkmir-private.h
@@ -115,11 +115,6 @@ void _gdk_mir_display_focus_window (GdkDisplay *display, GdkWindow *window);
 
 void _gdk_mir_display_unfocus_window (GdkDisplay *display, GdkWindow *window);
 
-void _gdk_mir_display_create_paste (GdkDisplay          *display,
-                                    const gchar * const *paste_formats,
-                                    gconstpointer        paste_data,
-                                    gsize                paste_size);
-
 gboolean _gdk_mir_display_init_egl_display (GdkDisplay *display);
 
 EGLDisplay _gdk_mir_display_get_egl_display (GdkDisplay *display);
diff --git a/gdk/mir/gdkmirdisplay.c b/gdk/mir/gdkmirdisplay.c
index 8b39e82e3e..c4080aad78 100644
--- a/gdk/mir/gdkmirdisplay.c
+++ b/gdk/mir/gdkmirdisplay.c
@@ -23,10 +23,6 @@
 #include "gdkmir.h"
 #include "gdkmir-private.h"
 
-#include <string.h>
-
-#include <com/ubuntu/content/glib/content-hub-glib.h>
-
 #define GDK_TYPE_DISPLAY_MIR              (gdk_mir_display_get_type ())
 #define GDK_MIR_DISPLAY(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_DISPLAY_MIR, GdkMirDisplay))
 #define GDK_MIR_DISPLAY_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_DISPLAY_MIR, GdkMirDisplayClass))
@@ -61,10 +57,6 @@ typedef struct GdkMirDisplay
   guint have_egl_buffer_age : 1;
   guint have_egl_swap_buffers_with_damage : 1;
   guint have_egl_surfaceless_context : 1;
-
-  ContentHubService *content_service;
-  ContentHubHandler *content_handler;
-  GVariant *paste_data;
 } GdkMirDisplay;
 
 typedef struct GdkMirDisplayClass
@@ -110,20 +102,12 @@ static void get_pixel_formats (MirConnection *, MirPixelFormat *sw, MirPixelForm
 
 G_DEFINE_TYPE (GdkMirDisplay, gdk_mir_display, GDK_TYPE_DISPLAY)
 
-static void
-pasteboard_changed_cb (GdkMirDisplay *display,
-                       gpointer       user_data)
-{
-  g_clear_pointer (&display->paste_data, g_variant_unref);
-}
-
 GdkDisplay *
 _gdk_mir_display_open (const gchar *display_name)
 {
   MirConnection *connection;
   MirPixelFormat sw_pixel_format, hw_pixel_format;
   GdkMirDisplay *display;
-  GDBusConnection *session;
 
   connection = mir_connect_sync (NULL, g_get_prgname ());
   if (!connection)
@@ -153,45 +137,6 @@ _gdk_mir_display_open (const gchar *display_name)
   display->sw_pixel_format = sw_pixel_format;
   display->hw_pixel_format = hw_pixel_format;
 
-  session = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, NULL);
-
-  display->content_service = content_hub_service_proxy_new_sync (
-    session,
-    G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES,
-    "com.ubuntu.content.dbus.Service",
-    "/",
-    NULL,
-    NULL);
-
-  g_signal_connect_swapped (
-    display->content_service,
-    "pasteboard-changed",
-    G_CALLBACK (pasteboard_changed_cb),
-    display);
-
-  display->content_handler = content_hub_handler_skeleton_new ();
-
-  g_dbus_interface_skeleton_export (
-    G_DBUS_INTERFACE_SKELETON (display->content_handler),
-    session,
-    "/org/gnome/gtk/content/handler",
-    NULL);
-
-  g_object_unref (session);
-
-  content_hub_service_call_register_import_export_handler_sync (
-    display->content_service,
-    g_application_get_application_id (g_application_get_default ()),
-    "/org/gnome/gtk/content/handler",
-    NULL,
-    NULL);
-
-  content_hub_service_call_handler_active_sync (
-    display->content_service,
-    g_application_get_application_id (g_application_get_default ()),
-    NULL,
-    NULL);
-
   g_signal_emit_by_name (display, "opened");
 
   return GDK_DISPLAY (display);
@@ -227,10 +172,6 @@ gdk_mir_display_dispose (GObject *object)
 {
   GdkMirDisplay *display = GDK_MIR_DISPLAY (object);
 
-  g_clear_pointer (&display->paste_data, g_variant_unref);
-  g_dbus_interface_skeleton_unexport (G_DBUS_INTERFACE_SKELETON (display->content_handler));
-  g_clear_object (&display->content_handler);
-  g_clear_object (&display->content_service);
   g_clear_object (&display->screen);
   g_clear_object (&display->keymap);
   g_clear_pointer (&display->event_source, g_source_unref);
@@ -482,28 +423,7 @@ gdk_mir_display_set_selection_owner (GdkDisplay *display,
                                      guint32     time,
                                      gboolean    send_event)
 {
-  GdkEvent *event;
-
-  if (selection == GDK_SELECTION_CLIPBOARD)
-    {
-      if (owner)
-        {
-          event = gdk_event_new (GDK_SELECTION_REQUEST);
-          event->selection.window = g_object_ref (owner);
-          event->selection.send_event = FALSE;
-          event->selection.selection = selection;
-          event->selection.target = gdk_atom_intern_static_string ("TARGETS");
-          event->selection.property = gdk_atom_intern_static_string ("AVAILABLE_TARGETS");
-          event->selection.time = GDK_CURRENT_TIME;
-          event->selection.requestor = g_object_ref (owner);
-
-          gdk_event_put (event);
-          gdk_event_free (event);
-
-          return TRUE;
-        }
-    }
-
+  //g_printerr ("gdk_mir_display_set_selection_owner\n");
   return FALSE;
 }
 
@@ -524,261 +444,10 @@ gdk_mir_display_get_selection_property (GdkDisplay  *display,
                                         GdkAtom     *ret_type,
                                         gint        *ret_format)
 {
-  gint length;
-
-  gdk_property_get (requestor,
-                    gdk_atom_intern_static_string ("GDK_SELECTION"),
-                    GDK_NONE,
-                    0,
-                    G_MAXULONG,
-                    FALSE,
-                    ret_type,
-                    ret_format,
-                    &length,
-                    data);
-
-  return length;
-}
-
-static gint
-get_format_score (const gchar *format,
-                  GdkAtom      target,
-                  GdkAtom     *out_type,
-                  gint        *out_size)
-{
-  const gchar *target_string;
-  GdkAtom dummy_type;
-  gint dummy_size;
-
-  target_string = _gdk_atom_name_const (target);
-
-  if (!out_type)
-    out_type = &dummy_type;
-
-  if (!out_size)
-    out_size = &dummy_size;
-
-  if (!g_ascii_strcasecmp (format, target_string))
-    {
-      *out_type = GDK_SELECTION_TYPE_STRING;
-      *out_size = sizeof (guchar);
-
-      return G_MAXINT;
-    }
-
-  if (target == gdk_atom_intern_static_string ("UTF8_STRING"))
-    return get_format_score (format, gdk_atom_intern_static_string ("text/plain;charset=utf-8"), out_type, out_size);
-
-  /* TODO: use best media type for COMPOUND_TEXT target */
-  if (target == gdk_atom_intern_static_string ("COMPOUND_TEXT"))
-    return get_format_score (format, gdk_atom_intern_static_string ("text/plain;charset=utf-8"), out_type, out_size);
-
-  if (target == GDK_TARGET_STRING)
-    return get_format_score (format, gdk_atom_intern_static_string ("text/plain;charset=iso-8859-1"), out_type, out_size);
-
-  if (target == gdk_atom_intern_static_string ("GTK_TEXT_BUFFER_CONTENTS"))
-    return get_format_score (format, gdk_atom_intern_static_string ("text/plain;charset=utf-8"), out_type, out_size);
-
-  if (g_content_type_is_a (format, target_string))
-    {
-      *out_type = GDK_SELECTION_TYPE_STRING;
-      *out_size = sizeof (guchar);
-
-      return 2;
-    }
-
-  if (g_content_type_is_a (target_string, format))
-    {
-      *out_type = GDK_SELECTION_TYPE_STRING;
-      *out_size = sizeof (guchar);
-
-      return 1;
-    }
-
+  //g_printerr ("gdk_mir_display_get_selection_property\n");
   return 0;
 }
 
-static gint
-get_best_format_index (const gchar * const *formats,
-                       guint                n_formats,
-                       GdkAtom              target,
-                       GdkAtom             *out_type,
-                       gint                *out_size)
-{
-  gint best_i = -1;
-  gint best_score = 0;
-  GdkAtom best_type;
-  gint best_size;
-  gint score;
-  GdkAtom type;
-  gint size;
-  gint i;
-
-  if (!out_type)
-    out_type = &best_type;
-
-  if (!out_size)
-    out_size = &best_size;
-
-  *out_type = GDK_NONE;
-  *out_size = 0;
-
-  for (i = 0; i < n_formats; i++)
-    {
-      score = get_format_score (formats[i], target, &type, &size);
-
-      if (score > best_score)
-        {
-          best_i = i;
-          best_score = score;
-          *out_type = type;
-          *out_size = size;
-        }
-    }
-
-  return best_i;
-}
-
-static void
-gdk_mir_display_real_convert_selection (GdkDisplay *display,
-                                        GdkWindow  *requestor,
-                                        GdkAtom     selection,
-                                        GdkAtom     target,
-                                        guint32     time)
-{
-  GdkMirDisplay *mir_display = GDK_MIR_DISPLAY (display);
-  const gchar *paste_data;
-  gsize paste_size;
-  const gint *paste_header;
-  GPtrArray *paste_formats;
-  GArray *paste_targets;
-  GdkAtom paste_target;
-  GdkEvent *event;
-  gint best_i;
-  GdkAtom best_type;
-  gint best_size;
-  gint i;
-
-  g_return_if_fail (mir_display->paste_data);
-
-  paste_data = g_variant_get_fixed_array (mir_display->paste_data, &paste_size, sizeof (guchar));
-  paste_header = (const gint *) paste_data;
-
-  if (paste_data)
-    {
-      paste_formats = g_ptr_array_new_full (paste_header[0], g_free);
-
-      for (i = 0; i < paste_header[0]; i++)
-        g_ptr_array_add (paste_formats, g_strndup (paste_data + paste_header[1 + 4 * i], paste_header[2 + 4 * i]));
-    }
-  else
-    paste_formats = g_ptr_array_new_with_free_func (g_free);
-
-  if (target == gdk_atom_intern_static_string ("TARGETS"))
-    {
-      paste_targets = g_array_sized_new (TRUE, FALSE, sizeof (GdkAtom), paste_formats->len);
-
-      for (i = 0; i < paste_formats->len; i++)
-        {
-          paste_target = gdk_atom_intern (g_ptr_array_index (paste_formats, i), FALSE);
-          g_array_append_val (paste_targets, paste_target);
-        }
-
-      gdk_property_change (requestor,
-                           gdk_atom_intern_static_string ("GDK_SELECTION"),
-                           GDK_SELECTION_TYPE_ATOM,
-                           8 * sizeof (GdkAtom),
-                           GDK_PROP_MODE_REPLACE,
-                           (const guchar *) paste_targets->data,
-                           paste_targets->len);
-
-      g_array_unref (paste_targets);
-
-      event = gdk_event_new (GDK_SELECTION_NOTIFY);
-      event->selection.window = g_object_ref (requestor);
-      event->selection.send_event = FALSE;
-      event->selection.selection = selection;
-      event->selection.target = target;
-      event->selection.property = gdk_atom_intern_static_string ("GDK_SELECTION");
-      event->selection.time = time;
-      event->selection.requestor = g_object_ref (requestor);
-
-      gdk_event_put (event);
-      gdk_event_free (event);
-    }
-  else
-    {
-      best_i = get_best_format_index ((const gchar * const *) paste_formats->pdata,
-                                      paste_formats->len,
-                                      target,
-                                      &best_type,
-                                      &best_size);
-
-      if (best_i >= 0)
-        {
-          gdk_property_change (requestor,
-                               gdk_atom_intern_static_string ("GDK_SELECTION"),
-                               best_type,
-                               8 * best_size,
-                               GDK_PROP_MODE_REPLACE,
-                               (const guchar *) paste_data + paste_header[3 + 4 * best_i],
-                               paste_header[4 + 4 * best_i] / best_size);
-
-          event = gdk_event_new (GDK_SELECTION_NOTIFY);
-          event->selection.window = g_object_ref (requestor);
-          event->selection.send_event = FALSE;
-          event->selection.selection = selection;
-          event->selection.target = target;
-          event->selection.property = gdk_atom_intern_static_string ("GDK_SELECTION");
-          event->selection.time = time;
-          event->selection.requestor = g_object_ref (requestor);
-
-          gdk_event_put (event);
-          gdk_event_free (event);
-        }
-    }
-
-  g_ptr_array_unref (paste_formats);
-}
-
-typedef struct
-{
-  GdkDisplay *display;
-  GdkWindow  *requestor;
-  GdkAtom     selection;
-  GdkAtom     target;
-  guint32     time;
-} ConvertInfo;
-
-static void
-paste_data_ready_cb (GObject      *source_object,
-                     GAsyncResult *res,
-                     gpointer      user_data)
-{
-  ContentHubService *content_service = CONTENT_HUB_SERVICE (source_object);
-  ConvertInfo *info = user_data;
-  GdkMirDisplay *mir_display = GDK_MIR_DISPLAY (info->display);
-  gboolean result;
-
-  g_clear_pointer (&mir_display->paste_data, g_variant_unref);
-
-  result = content_hub_service_call_get_latest_paste_data_finish (content_service,
-                                                                  &mir_display->paste_data,
-                                                                  res,
-                                                                  NULL);
-
-  if (result)
-    gdk_mir_display_real_convert_selection (info->display,
-                                            info->requestor,
-                                            info->selection,
-                                            info->target,
-                                            info->time);
-
-  g_object_unref (info->requestor);
-  g_object_unref (info->display);
-  g_free (info);
-}
-
 static void
 gdk_mir_display_convert_selection (GdkDisplay *display,
                                    GdkWindow  *requestor,
@@ -786,46 +455,7 @@ gdk_mir_display_convert_selection (GdkDisplay *display,
                                    GdkAtom     target,
                                    guint32     time)
 {
-  GdkMirDisplay *mir_display = GDK_MIR_DISPLAY (display);
-  MirWindow *mir_window;
-  MirWindowId *mir_window_id;
-  ConvertInfo *info;
-
-  if (selection != GDK_SELECTION_CLIPBOARD)
-    return;
-  else if (mir_display->paste_data)
-    gdk_mir_display_real_convert_selection (display, requestor, selection, target, time);
-  else if (mir_display->focused_window)
-    {
-      mir_window = _gdk_mir_window_get_mir_window (mir_display->focused_window);
-
-      if (!mir_window)
-        return;
-
-      mir_window_id = mir_window_request_window_id_sync (mir_window);
-
-      if (!mir_window_id)
-        return;
-
-      if (mir_window_id_is_valid (mir_window_id))
-        {
-          info = g_new (ConvertInfo, 1);
-          info->display = g_object_ref (display);
-          info->requestor = g_object_ref (requestor);
-          info->selection = selection;
-          info->target = target;
-          info->time = time;
-
-          content_hub_service_call_get_latest_paste_data (
-            mir_display->content_service,
-            mir_window_id_as_string (mir_window_id),
-            NULL,
-            paste_data_ready_cb,
-            info);
-        }
-
-      mir_window_id_release (mir_window_id);
-    }
+  //g_printerr ("gdk_mir_display_convert_selection\n");
 }
 
 static gint
@@ -836,38 +466,8 @@ gdk_mir_display_text_property_to_utf8_list (GdkDisplay    *display,
                                             gint           length,
                                             gchar       ***list)
 {
-  GPtrArray *array;
-  const gchar *ptr;
-  gsize chunk_len;
-  gchar *copy;
-  guint nitems;
-
-  ptr = (const gchar *) text;
-  array = g_ptr_array_new ();
-
-  /* split text into utf-8 strings */
-  while (ptr < (const gchar *) &text[length])
-    {
-      chunk_len = strlen (ptr);
-
-      if (g_utf8_validate (ptr, chunk_len, NULL))
-        {
-          copy = g_strndup (ptr, chunk_len);
-          g_ptr_array_add (array, copy);
-        }
-
-      ptr = &ptr[chunk_len + 1];
-    }
-
-  nitems = array->len;
-  g_ptr_array_add (array, NULL);
-
-  if (list)
-    *list = (gchar **) g_ptr_array_free (array, FALSE);
-  else
-    g_ptr_array_free (array, TRUE);
-
-  return nitems;
+  //g_printerr ("gdk_mir_display_text_property_to_utf8_list\n");
+  return 0;
 }
 
 static gchar *
@@ -962,43 +562,6 @@ _gdk_mir_display_unfocus_window (GdkDisplay *display,
     g_clear_object (&mir_display->focused_window);
 }
 
-void
-_gdk_mir_display_create_paste (GdkDisplay          *display,
-                               const gchar * const *paste_formats,
-                               gconstpointer        paste_data,
-                               gsize                paste_size)
-{
-  GdkMirDisplay *mir_display = GDK_MIR_DISPLAY (display);
-  MirWindow *mir_window;
-  MirWindowId *mir_window_id;
-
-  if (!mir_display->focused_window)
-    return;
-
-  mir_window = _gdk_mir_window_get_mir_window (mir_display->focused_window);
-
-  if (!mir_window)
-    return;
-
-  mir_window_id = mir_window_request_window_id_sync (mir_window);
-
-  if (!mir_window_id)
-    return;
-
-  if (mir_window_id_is_valid (mir_window_id))
-    content_hub_service_call_create_paste_sync (
-      mir_display->content_service,
-      g_application_get_application_id (g_application_get_default ()),
-      mir_window_id_as_string (mir_window_id),
-      g_variant_new_fixed_array (G_VARIANT_TYPE_BYTE, paste_data, paste_size, sizeof (guchar)),
-      paste_formats,
-      NULL,
-      NULL,
-      NULL);
-
-  mir_window_id_release (mir_window_id);
-}
-
 gboolean
 _gdk_mir_display_init_egl_display (GdkDisplay *display)
 {
diff --git a/gdk/mir/gdkmirwindowimpl.c b/gdk/mir/gdkmirwindowimpl.c
index 9f9107611e..320414fb0a 100644
--- a/gdk/mir/gdkmirwindowimpl.c
+++ b/gdk/mir/gdkmirwindowimpl.c
@@ -1899,140 +1899,6 @@ gdk_mir_window_impl_get_property (GdkWindow  *window,
 }
 
 static void
-request_targets (GdkWindow     *window,
-                 const GdkAtom *available_targets,
-                 gint           n_available_targets)
-{
-  GArray *requested_targets;
-  GdkAtom target_pair[2];
-  gchar *target_location;
-  GdkEvent *event;
-  gint i;
-
-  requested_targets = g_array_sized_new (TRUE, FALSE, sizeof (GdkAtom), 2 * n_available_targets);
-
-  for (i = 0; i < n_available_targets; i++)
-    {
-      target_pair[0] = available_targets[i];
-
-      if (target_pair[0] == gdk_atom_intern_static_string ("TIMESTAMP") ||
-          target_pair[0] == gdk_atom_intern_static_string ("TARGETS") ||
-          target_pair[0] == gdk_atom_intern_static_string ("MULTIPLE") ||
-          target_pair[0] == gdk_atom_intern_static_string ("SAVE_TARGETS"))
-        continue;
-
-      target_location = g_strdup_printf ("REQUESTED_TARGET_U%u", requested_targets->len / 2);
-      target_pair[1] = gdk_atom_intern (target_location, FALSE);
-      g_free (target_location);
-
-      g_array_append_vals (requested_targets, target_pair, 2);
-    }
-
-  gdk_property_delete (window, gdk_atom_intern_static_string ("AVAILABLE_TARGETS"));
-  gdk_property_delete (window, gdk_atom_intern_static_string ("REQUESTED_TARGETS"));
-
-  gdk_property_change (window,
-                       gdk_atom_intern_static_string ("REQUESTED_TARGETS"),
-                       GDK_SELECTION_TYPE_ATOM,
-                       8 * sizeof (GdkAtom),
-                       GDK_PROP_MODE_REPLACE,
-                       (const guchar *) requested_targets->data,
-                       requested_targets->len);
-
-  g_array_unref (requested_targets);
-
-  event = gdk_event_new (GDK_SELECTION_REQUEST);
-  event->selection.window = g_object_ref (window);
-  event->selection.send_event = FALSE;
-  event->selection.selection = GDK_SELECTION_CLIPBOARD;
-  event->selection.target = gdk_atom_intern_static_string ("MULTIPLE");
-  event->selection.property = gdk_atom_intern_static_string ("REQUESTED_TARGETS");
-  event->selection.time = GDK_CURRENT_TIME;
-  event->selection.requestor = g_object_ref (window);
-
-  gdk_event_put (event);
-  gdk_event_free (event);
-}
-
-static void
-create_paste (GdkWindow     *window,
-              const GdkAtom *requested_targets,
-              gint           n_requested_targets)
-{
-  GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
-  GPtrArray *paste_formats;
-  GArray *paste_header;
-  GByteArray *paste_data;
-  gint sizes[4];
-  GdkMirProperty *mir_property;
-  const gchar *paste_format;
-  gint i;
-
-  paste_formats = g_ptr_array_new_full (n_requested_targets, g_free);
-  paste_header = g_array_sized_new (FALSE, FALSE, sizeof (gint), 1 + 4 * n_requested_targets);
-  paste_data = g_byte_array_new ();
-
-  g_array_append_val (paste_header, sizes[0]);
-
-  for (i = 0; i < n_requested_targets; i++)
-    {
-      if (requested_targets[i] == GDK_NONE)
-        continue;
-
-      mir_property = g_hash_table_lookup (impl->properties, requested_targets[i]);
-
-      if (!mir_property)
-        continue;
-
-      paste_format = _gdk_atom_name_const (mir_property->type);
-
-      /* skip non-MIME targets */
-      if (!strchr (paste_format, '/'))
-        {
-          g_hash_table_remove (impl->properties, requested_targets[i]);
-          continue;
-        }
-
-      sizes[0] = paste_data->len;
-      sizes[1] = strlen (paste_format);
-      sizes[2] = sizes[0] + sizes[1];
-      sizes[3] = mir_property->array->len * g_array_get_element_size (mir_property->array);
-
-      g_ptr_array_add (paste_formats, g_strdup (paste_format));
-      g_array_append_vals (paste_header, sizes, 4);
-      g_byte_array_append (paste_data, (const guint8 *) paste_format, sizes[1]);
-      g_byte_array_append (paste_data, (const guint8 *) mir_property->array->data, sizes[3]);
-
-      g_hash_table_remove (impl->properties, requested_targets[i]);
-    }
-
-  gdk_property_delete (window, gdk_atom_intern_static_string ("REQUESTED_TARGETS"));
-
-  g_array_index (paste_header, gint, 0) = paste_formats->len;
-
-  for (i = 0; i < paste_formats->len; i++)
-    {
-      g_array_index (paste_header, gint, 1 + 4 * i) += paste_header->len * sizeof (gint);
-      g_array_index (paste_header, gint, 3 + 4 * i) += paste_header->len * sizeof (gint);
-    }
-
-  g_byte_array_prepend (paste_data,
-                        (const guint8 *) paste_header->data,
-                        paste_header->len * g_array_get_element_size (paste_header));
-
-  g_ptr_array_add (paste_formats, NULL);
-
-  _gdk_mir_display_create_paste (gdk_window_get_display (window),
-                                 (const gchar * const *) paste_formats->pdata,
-                                 paste_data->data,
-                                 paste_data->len);
-
-  g_byte_array_unref (paste_data);
-  g_array_unref (paste_header);
-  g_ptr_array_unref (paste_formats);
-}
-
-static void
 gdk_mir_window_impl_change_property (GdkWindow    *window,
                                      GdkAtom       property,
                                      GdkAtom       type,
@@ -2043,7 +1909,6 @@ gdk_mir_window_impl_change_property (GdkWindow    *window,
 {
   GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
   GdkMirProperty *mir_property;
-  gboolean existed;
   GdkEvent *event;
 
   /* ICCCM 2.7: ATOMs and ATOM_PAIRs have format 32, but GdkAtoms can be 64-bit */
@@ -2051,15 +1916,9 @@ gdk_mir_window_impl_change_property (GdkWindow    *window,
     format = 8 * sizeof (GdkAtom);
 
   if (mode != GDK_PROP_MODE_REPLACE)
-    {
-      mir_property = g_hash_table_lookup (impl->properties, property);
-      existed = mir_property != NULL;
-    }
+    mir_property = g_hash_table_lookup (impl->properties, property);
   else
-    {
-      mir_property = NULL;
-      existed = g_hash_table_contains (impl->properties, property);
-    }
+    mir_property = NULL;
 
   if (!mir_property)
     {
@@ -2086,11 +1945,6 @@ gdk_mir_window_impl_change_property (GdkWindow    *window,
 
   gdk_event_put (event);
   gdk_event_free (event);
-
-  if (property == gdk_atom_intern_static_string ("AVAILABLE_TARGETS"))
-    request_targets (window, (const GdkAtom *) data, n_elements);
-  else if (property == gdk_atom_intern_static_string ("REQUESTED_TARGETS") && existed)
-    create_paste (window, (const GdkAtom *) data, n_elements);
 }
 
 static void
