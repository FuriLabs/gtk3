Reverts ad48f4d52bbac6139dd829fcc421ad16441f34d2
Add back the feature but in a different way:
* requires the Alt modifier
* works from the whole area
See GNOME #630226 and #145244

Index: gtk+-3.0.10/gtk/gtknotebook.c
===================================================================
--- gtk+-3.0.10.orig/gtk/gtknotebook.c	2011-06-04 20:43:14.790926584 +0200
+++ gtk+-3.0.10/gtk/gtknotebook.c	2011-06-04 23:26:47.114896599 +0200
@@ -338,6 +338,8 @@ static void gtk_notebook_size_allocate
                                               GtkAllocation    *allocation);
 static gint gtk_notebook_draw                (GtkWidget        *widget,
                                               cairo_t          *cr);
+static gboolean gtk_notebook_scroll          (GtkWidget        *widget,
+                                              GdkEventScroll   *event);
 static gint gtk_notebook_button_press        (GtkWidget        *widget,
                                               GdkEventButton   *event);
 static gint gtk_notebook_button_release      (GtkWidget        *widget,
@@ -639,6 +641,7 @@ gtk_notebook_class_init (GtkNotebookClas
   widget_class->get_preferred_height = gtk_notebook_get_preferred_height;
   widget_class->size_allocate = gtk_notebook_size_allocate;
   widget_class->draw = gtk_notebook_draw;
+  widget_class->scroll_event = gtk_notebook_scroll;
   widget_class->button_press_event = gtk_notebook_button_press;
   widget_class->button_release_event = gtk_notebook_button_release;
   widget_class->popup_menu = gtk_notebook_popup_menu;
@@ -1857,7 +1860,8 @@ gtk_notebook_realize (GtkWidget *widget)
   attributes.event_mask = gtk_widget_get_events (widget);
   attributes.event_mask |= (GDK_BUTTON_PRESS_MASK |
                             GDK_BUTTON_RELEASE_MASK | GDK_KEY_PRESS_MASK |
-                            GDK_POINTER_MOTION_MASK | GDK_LEAVE_NOTIFY_MASK);
+                            GDK_POINTER_MOTION_MASK | GDK_LEAVE_NOTIFY_MASK |
+                            GDK_SCROLL_MASK);
   attributes_mask = GDK_WA_X | GDK_WA_Y;
 
   priv->event_window = gdk_window_new (gtk_widget_get_parent_window (widget),
@@ -2712,6 +2716,38 @@ get_widget_coordinates (GtkWidget *widge
     return FALSE;
 }
 
+static gboolean
+gtk_notebook_scroll (GtkWidget      *widget,
+                     GdkEventScroll *event)
+{
+  GtkNotebook *notebook = GTK_NOTEBOOK (widget);
+  GtkNotebookPrivate *priv = notebook->priv;
+  gint i;
+
+  if (!priv->cur_page)
+    return FALSE;
+
+  /* Only actually scroll when Mod1 is pressed.
+     This allows us to scroll from the page contents
+     or the action area too */
+  if (!(event->state & GDK_MOD1_MASK))
+    return FALSE;
+
+  switch (event->direction)
+    {
+    case GDK_SCROLL_RIGHT:
+    case GDK_SCROLL_DOWN:
+      gtk_notebook_next_page (notebook);
+      break;
+    case GDK_SCROLL_LEFT:
+    case GDK_SCROLL_UP:
+      gtk_notebook_prev_page (notebook);
+      break;
+    }
+
+  return TRUE;
+}
+
 static GList*
 get_tab_at_pos (GtkNotebook *notebook, gint x, gint y)
 {
Index: gtk+-3.0.10/gtk/gtkscrolledwindow.c
===================================================================
--- gtk+-3.0.10.orig/gtk/gtkscrolledwindow.c	2011-06-05 00:19:33.742377450 +0200
+++ gtk+-3.0.10/gtk/gtkscrolledwindow.c	2011-06-05 00:21:13.962867404 +0200
@@ -1850,6 +1850,10 @@ gtk_scrolled_window_scroll_event (GtkWid
   scrolled_window = GTK_SCROLLED_WINDOW (widget);
   priv = scrolled_window->priv;
 
+  /* Ignore Alt-scroll to allow it to be taken by GtkNotebook */
+  if (event->state & GDK_MOD1_MASK)
+    return FALSE;
+
   if (event->direction == GDK_SCROLL_UP || event->direction == GDK_SCROLL_DOWN)
     range = priv->vscrollbar;
   else
