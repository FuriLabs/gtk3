From ec70eb8ae0c2e941d0677803f4b1bdf9f7273be6 Mon Sep 17 00:00:00 2001
From: William Hua <william.hua@canonical.com>
Date: Fri, 31 Mar 2017 15:14:16 -0400
Subject: [PATCH 24/32] mir: re-write settings implementation

This is a squash of commits
01b73072961f8c62255cf2b66dba4e55d36fd646 and
6e711beb0bdc2a30bfd948e5a6a077cd6fe82493.
---
 gdk/mir/gdkmirscreen.c | 679 +++++++++++++++++++++++++++++++++++--------------
 1 file changed, 492 insertions(+), 187 deletions(-)

diff --git a/gdk/mir/gdkmirscreen.c b/gdk/mir/gdkmirscreen.c
index c1a189908e..0ddcb8787a 100644
--- a/gdk/mir/gdkmirscreen.c
+++ b/gdk/mir/gdkmirscreen.c
@@ -48,9 +48,15 @@ struct GdkMirScreen
   /* Current monitor configuration */
   MirDisplayConfig *display_config;
 
+  /* Display format */
   GdkVisual *visual;
 
+  /* Root window */
   GdkWindow *root_window;
+
+  /* Settings */
+  GHashTable *settings_objects;
+  GHashTable *current_settings;
 };
 
 struct GdkMirScreenClass
@@ -168,6 +174,11 @@ _gdk_mir_screen_new (GdkDisplay *display)
 static void
 gdk_mir_screen_dispose (GObject *object)
 {
+  GdkMirScreen *screen = GDK_MIR_SCREEN (object);
+
+  g_clear_pointer (&screen->current_settings, g_hash_table_unref);
+  g_clear_pointer (&screen->settings_objects, g_hash_table_unref);
+
   G_OBJECT_CLASS (gdk_mir_screen_parent_class)->dispose (object);
 }
 
@@ -459,260 +470,551 @@ gdk_mir_screen_broadcast_client_message (GdkScreen *screen,
   // FIXME
 }
 
-static gboolean
-gdk_mir_screen_get_setting (GdkScreen   *screen,
-                            const gchar *name,
-                            GValue      *value)
+static void setting_changed (GSettings    *settings,
+                             const gchar  *key,
+                             GdkMirScreen *screen);
+
+static GSettings *
+get_settings (GdkMirScreen *screen,
+              const gchar  *schema_id)
 {
-  if (strcmp (name, "gtk-theme-name") == 0)
-    {
-      g_value_set_string (value, "Ambiance");
-      return TRUE;
-    }
+  GSettings *settings;
+  GSettingsSchemaSource *source;
+  GSettingsSchema *schema;
 
-  if (strcmp (name, "gtk-font-name") == 0)
-    {
-      g_value_set_string (value, "Ubuntu");
-      return TRUE;
-    }
+  settings = g_hash_table_lookup (screen->settings_objects, schema_id);
 
-  if (strcmp (name, "gtk-enable-animations") == 0)
-    {
-      g_value_set_boolean (value, TRUE);
-      return TRUE;
-    }
+  if (settings)
+    return g_object_ref (settings);
 
-  if (strcmp (name, "gtk-xft-dpi") == 0)
-    {
-      g_value_set_int (value, 96 * 1024);
-      return TRUE;
-    }
+  source = g_settings_schema_source_get_default ();
 
-  if (strcmp (name, "gtk-xft-antialias") == 0)
+  if (!source)
     {
-      g_value_set_int (value, TRUE);
-      return TRUE;
+      g_warning ("no schemas installed");
+      return NULL;
     }
 
-  if (strcmp (name, "gtk-xft-hinting") == 0)
-    {
-      g_value_set_int (value, TRUE);
-      return TRUE;
-    }
+  schema = g_settings_schema_source_lookup (source, schema_id, TRUE);
 
-  if (strcmp (name, "gtk-xft-hintstyle") == 0)
+  if (!schema)
     {
-      g_value_set_static_string (value, "hintfull");
-      return TRUE;
+      g_warning ("schema not found: %s", schema_id);
+      return NULL;
     }
 
-  if (strcmp (name, "gtk-xft-rgba") == 0)
-    {
-      g_value_set_static_string (value, "rgba");
-      return TRUE;
-    }
+  settings = g_settings_new_full (schema, NULL, NULL);
+  g_signal_connect (settings, "changed", G_CALLBACK (setting_changed), screen);
+  g_hash_table_insert (screen->settings_objects, g_strdup (schema_id), g_object_ref (settings));
+  g_settings_schema_unref (schema);
+  return settings;
+}
 
-  if (g_str_equal (name, "gtk-modules"))
-    {
-      g_value_set_string (value, NULL);
-      return TRUE;
-    }
+static GVariant *
+read_setting (GdkMirScreen *screen,
+              const gchar  *schema_id,
+              const gchar  *key)
+{
+  GSettings *settings;
+  GVariant *variant;
 
-  if (g_str_equal (name, "gtk-application-prefer-dark-theme"))
-    {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
-    }
+  settings = get_settings (screen, schema_id);
 
-  if (g_str_equal (name, "gtk-key-theme-name"))
-    {
-      g_value_set_string (value, NULL);
-      return TRUE;
-    }
+  if (!settings)
+    return NULL;
 
-  if (g_str_equal (name, "gtk-double-click-time"))
-    {
-      g_value_set_int (value, 250);
-      return TRUE;
-    }
+  variant = g_settings_get_value (settings, key);
+  g_object_unref (settings);
+  return variant;
+}
 
-  if (g_str_equal (name, "gtk-double-click-distance"))
-    {
-      g_value_set_int (value, 5);
-      return TRUE;
-    }
+static void
+change_setting (GdkMirScreen *screen,
+                const gchar  *name,
+                GVariant     *variant)
+{
+  GVariant *old_variant;
+  GdkEventSetting event;
 
-  if (g_str_equal (name, "gtk-cursor-theme-name"))
-    {
-      g_value_set_string (value, "Raleigh");
-      return TRUE;
-    }
+  old_variant = g_hash_table_lookup (screen->current_settings, name);
 
-  if (g_str_equal (name, "gtk-cursor-theme-size"))
-    {
-      g_value_set_int (value, 128);
-      return TRUE;
-    }
+  if (variant == old_variant)
+    return;
 
-  if (g_str_equal (name, "gtk-icon-theme-name"))
-    {
-      g_value_set_string (value, "hicolor");
-      return TRUE;
-    }
+  if (variant && old_variant && g_variant_equal (variant, old_variant))
+    return;
 
-  if (g_str_equal (name, "gtk-shell-shows-app-menu"))
-    {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
-    }
+  event.type = GDK_SETTING;
+  event.window = gdk_screen_get_root_window (GDK_SCREEN (screen));
+  event.send_event = FALSE;
+  event.name = g_strdup (name);
 
-  if (g_str_equal (name, "gtk-shell-shows-menubar"))
+  if (variant)
     {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
+      event.action = old_variant ? GDK_SETTING_ACTION_CHANGED : GDK_SETTING_ACTION_NEW;
+      g_hash_table_insert (screen->current_settings, g_strdup (name), g_variant_ref_sink (variant));
     }
-
-  if (g_str_equal (name, "gtk-shell-shows-desktop"))
+  else
     {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
+      event.action = GDK_SETTING_ACTION_DELETED;
+      g_hash_table_remove (screen->current_settings, name);
     }
 
-  if (g_str_equal (name, "gtk-recent-files-enabled"))
-    {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
-    }
+  gdk_event_put ((const GdkEvent *) &event);
+  g_free (event.name);
+}
 
-  if (g_str_equal (name, "gtk-alternative-sort-arrows"))
-    {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
-    }
+static const struct
+{
+  const gchar *name;
+  const gchar *schema_id;
+  const gchar *key;
+} SETTINGS_MAP[] = {
+  {
+    "gtk-double-click-time",
+    "org.gnome.settings-daemon.peripherals.mouse",
+    "double-click"
+  },
+  {
+    "gtk-cursor-blink",
+    "org.gnome.desktop.interface",
+    "cursor-blink"
+  },
+  {
+    "gtk-cursor-blink-time",
+    "org.gnome.desktop.interface",
+    "cursor-blink-time"
+  },
+  {
+    "gtk-cursor-blink-timeout",
+    "org.gnome.desktop.interface",
+    "cursor-blink-timeout"
+  },
+  {
+    "gtk-theme-name",
+    "org.gnome.desktop.interface",
+    "gtk-theme"
+  },
+  {
+    "gtk-icon-theme-name",
+    "org.gnome.desktop.interface",
+    "icon-theme"
+  },
+  {
+    "gtk-key-theme-name",
+    "org.gnome.desktop.interface",
+    "gtk-key-theme"
+  },
+  {
+    "gtk-dnd-drag-threshold",
+    "org.gnome.settings-daemon.peripherals.mouse",
+    "drag-threshold"
+  },
+  {
+    "gtk-font-name",
+    "org.gnome.desktop.interface",
+    "font-name"
+  },
+  {
+    "gtk-xft-antialias",
+    "org.gnome.settings-daemon.plugins.xsettings",
+    "antialiasing"
+  },
+  {
+    "gtk-xft-hinting",
+    "org.gnome.settings-daemon.plugins.xsettings",
+    "hinting"
+  },
+  {
+    "gtk-xft-hintstyle",
+    "org.gnome.settings-daemon.plugins.xsettings",
+    "hinting"
+  },
+  {
+    "gtk-xft-rgba",
+    "org.gnome.settings-daemon.plugins.xsettings",
+    "rgba-order"
+  },
+  {
+    "gtk-xft-dpi",
+    "org.gnome.desktop.interface",
+    "text-scaling-factor"
+  },
+  {
+    "gtk-cursor-theme-name",
+    "org.gnome.desktop.interface",
+    "cursor-theme"
+  },
+  {
+    "gtk-cursor-theme-size",
+    "org.gnome.desktop.interface",
+    "cursor-size"
+  },
+  {
+    "gtk-enable-animations",
+    "org.gnome.desktop.interface",
+    "enable-animations"
+  },
+  {
+    "gtk-im-module",
+    "org.gnome.desktop.interface",
+    "gtk-im-module"
+  },
+  {
+    "gtk-recent-files-max-age",
+    "org.gnome.desktop.privacy",
+    "recent-files-max-age"
+  },
+  {
+    "gtk-sound-theme-name",
+    "org.gnome.desktop.sound",
+    "theme-name"
+  },
+  {
+    "gtk-enable-input-feedback-sounds",
+    "org.gnome.desktop.sound",
+    "input-feedback-sounds"
+  },
+  {
+    "gtk-enable-event-sounds",
+    "org.gnome.desktop.sound",
+    "event-sounds"
+  },
+  {
+    "gtk-shell-shows-desktop",
+    "org.gnome.desktop.background",
+    "show-desktop-icons"
+  },
+  {
+    "gtk-decoration-layout",
+    "org.gnome.desktop.wm.preferences",
+    "button-layout"
+  },
+  {
+    "gtk-titlebar-double-click",
+    "org.gnome.desktop.wm.preferences",
+    "action-double-click-titlebar"
+  },
+  {
+    "gtk-titlebar-middle-click",
+    "org.gnome.desktop.wm.preferences",
+    "action-middle-click-titlebar"
+  },
+  {
+    "gtk-titlebar-right-click",
+    "org.gnome.desktop.wm.preferences",
+    "action-right-click-titlebar"
+  },
+  {
+    "gtk-enable-primary-paste",
+    "org.gnome.desktop.interface",
+    "gtk-enable-primary-paste"
+  },
+  {
+    "gtk-recent-files-enabled",
+    "org.gnome.desktop.privacy",
+    "remember-recent-files"
+  },
+  {
+    "gtk-keynav-use-caret",
+    "org.gnome.desktop.a11y",
+    "always-show-text-caret"
+  },
+  { NULL }
+};
 
-  if (g_str_equal (name, "gtk-enable-accels"))
-    {
-      g_value_set_boolean (value, TRUE);
-      return TRUE;
-    }
+static guint
+get_scaling_factor (GdkMirScreen *screen)
+{
+  GVariant *variant;
+  guint scaling_factor;
 
-  if (g_str_equal (name, "gtk-enable-mnemonics"))
-    {
-      g_value_set_boolean (value, TRUE);
-      return TRUE;
-    }
+  variant = read_setting (screen, "org.gnome.desktop.interface", "scaling-factor");
 
-  if (g_str_equal (name, "gtk-menu-images"))
+  if (!variant)
     {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
+      g_warning ("no scaling factor: org.gnome.desktop.interface.scaling-factor");
+      variant = g_variant_ref_sink (g_variant_new_uint32 (0));
     }
 
-  if (g_str_equal (name, "gtk-button-images"))
-    {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
-    }
+  scaling_factor = g_variant_get_uint32 (variant);
+  g_variant_unref (variant);
 
-  if (g_str_equal (name, "gtk-split-cursor"))
-    {
-      g_value_set_boolean (value, TRUE);
-      return TRUE;
-    }
+  if (scaling_factor)
+    return scaling_factor;
 
-  if (g_str_equal (name, "gtk-im-module"))
-    {
-      g_value_set_string (value, NULL);
-      return TRUE;
-    }
+  scaling_factor = 1;
 
-  if (g_str_equal (name, "gtk-menu-bar-accel"))
-    {
-      g_value_set_string (value, "F10");
-      return TRUE;
-    }
+  /* TODO: scaling_factor = 2 if HiDPI >= 2 * 96 */
 
-  if (g_str_equal (name, "gtk-cursor-blink"))
-    {
-      g_value_set_boolean (value, TRUE);
-      return TRUE;
-    }
+  return scaling_factor;
+}
 
-  if (g_str_equal (name, "gtk-cursor-blink-time"))
-    {
-      g_value_set_int (value, 1200);
-      return TRUE;
-    }
+static void
+update_setting (GdkMirScreen *screen,
+                const gchar  *name)
+{
+  GVariant *variant;
+  GVariant *antialiasing_variant;
+  gboolean gtk_xft_antialias;
+  gboolean gtk_xft_hinting;
+  gdouble text_scaling_factor;
+  gint cursor_size;
+  gint i;
 
-  if (g_str_equal (name, "gtk-cursor-blink-timeout"))
+  if (!g_strcmp0 (name, "gtk-modules"))
     {
-      g_value_set_int (value, 10);
-      return TRUE;
+      /* TODO: X-GTK-Module-Enabled-Schema, X-GTK-Module-Enabled-Key */
+      /* TODO: org.gnome.settings-daemon.plugins.xsettings.enabled-gtk-modules */
+      /* TODO: org.gnome.settings-daemon.plugins.xsettings.disabled-gtk-modules */
+      return;
     }
-
-  if (g_str_equal (name, "gtk-entry-select-on-focus"))
+  else
     {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
+      for (i = 0; SETTINGS_MAP[i].name; i++)
+        if (!g_strcmp0 (name, SETTINGS_MAP[i].name))
+          break;
+
+      if (!SETTINGS_MAP[i].name)
+        return;
+
+      variant = read_setting (screen, SETTINGS_MAP[i].schema_id, SETTINGS_MAP[i].key);
+
+      if (!variant)
+        {
+          g_warning ("no setting for %s: %s.%s", SETTINGS_MAP[i].name, SETTINGS_MAP[i].schema_id, SETTINGS_MAP[i].key);
+          return;
+        }
     }
 
-  if (g_str_equal (name, "gtk-error-bell"))
+  if (!g_strcmp0 (name, "gtk-xft-antialias"))
     {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
+      gtk_xft_antialias = g_strcmp0 (g_variant_get_string (variant, NULL), "none");
+      g_variant_unref (variant);
+      variant = g_variant_ref_sink (g_variant_new_int32 (gtk_xft_antialias ? 1 : 0));
     }
-
-  if (g_str_equal (name, "gtk-label-select-on-focus"))
+  else if (!g_strcmp0 (name, "gtk-xft-hinting"))
     {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
+      gtk_xft_hinting = g_strcmp0 (g_variant_get_string (variant, NULL), "none");
+      g_variant_unref (variant);
+      variant = g_variant_ref_sink (g_variant_new_int32 (gtk_xft_hinting ? 1 : 0));
     }
-
-  if (g_str_equal (name, "gtk-decoration-layout"))
+  else if (!g_strcmp0 (name, "gtk-xft-hintstyle"))
     {
-      g_value_set_string (value, "menu:minimize,maximize,close");
-      return TRUE;
+      if (!g_strcmp0 (g_variant_get_string (variant, NULL), "none"))
+        {
+          g_variant_unref (variant);
+          variant = g_variant_ref_sink (g_variant_new_string ("hintnone"));
+        }
+      else if (!g_strcmp0 (g_variant_get_string (variant, NULL), "slight"))
+        {
+          g_variant_unref (variant);
+          variant = g_variant_ref_sink (g_variant_new_string ("hintslight"));
+        }
+      else if (!g_strcmp0 (g_variant_get_string (variant, NULL), "medium"))
+        {
+          g_variant_unref (variant);
+          variant = g_variant_ref_sink (g_variant_new_string ("hintmedium"));
+        }
+      else if (!g_strcmp0 (g_variant_get_string (variant, NULL), "full"))
+        {
+          g_variant_unref (variant);
+          variant = g_variant_ref_sink (g_variant_new_string ("hintfull"));
+        }
+      else
+        {
+          g_warning ("unknown org.gnome.settings-daemon.plugins.xsettings.hinting value: %s", g_variant_get_string (variant, NULL));
+          g_variant_unref (variant);
+          return;
+        }
     }
+  else if (!g_strcmp0 (name, "gtk-xft-rgba"))
+    {
+      antialiasing_variant = read_setting (screen, "org.gnome.settings-daemon.plugins.xsettings", "antialiasing");
+
+      if (g_strcmp0 (g_variant_get_string (antialiasing_variant, NULL), "rgba"))
+        {
+          g_variant_unref (variant);
+          variant = g_variant_ref_sink (g_variant_new_string ("none"));
+        }
+      else if (g_strcmp0 (g_variant_get_string (variant, NULL), "rgba"))
+        {
+          g_variant_unref (variant);
+          variant = g_variant_ref_sink (g_variant_new_string ("rgb"));
+        }
 
-  if (g_str_equal (name, "gtk-dnd-drag-threshold"))
+      g_variant_unref (antialiasing_variant);
+    }
+  else if (!g_strcmp0 (name, "gtk-xft-dpi"))
     {
-      g_value_set_int (value, 8);
-      return TRUE;
+      text_scaling_factor = g_variant_get_double (variant);
+      g_variant_unref (variant);
+      variant = g_variant_ref_sink (g_variant_new_int32 (1024 * get_scaling_factor (screen) * text_scaling_factor + 0.5));
     }
-
-  if (g_str_equal (name, "gtk-dialogs-use-header"))
+  else if (!g_strcmp0 (name, "gtk-cursor-theme-size"))
     {
-      g_value_set_boolean (value, FALSE);
-      return TRUE;
+      cursor_size = g_variant_get_int32 (variant);
+      g_variant_unref (variant);
+      variant = g_variant_ref_sink (g_variant_new_int32 (get_scaling_factor (screen) * cursor_size));
     }
-
-  if (g_str_equal (name, "gtk-long-press-time"))
+  else if (!g_strcmp0 (name, "gtk-enable-animations"))
     {
-      g_value_set_uint (value, 500);
-      return TRUE;
+      /* TODO: disable under vnc/vino/llvmpipe */
     }
 
-  if (g_str_equal (name, "gtk-primary-button-warps-slider"))
+  change_setting (screen, name, variant);
+  g_variant_unref (variant);
+}
+
+static void
+setting_changed (GSettings    *settings,
+                 const gchar  *key,
+                 GdkMirScreen *screen)
+{
+  gchar *schema_id;
+  gint i;
+
+  g_object_get (settings, "schema-id", &schema_id, NULL);
+
+  for (i = 0; SETTINGS_MAP[i].name; i++)
+    if (!g_strcmp0 (schema_id, SETTINGS_MAP[i].schema_id) && !g_strcmp0 (key, SETTINGS_MAP[i].key))
+      update_setting (screen, SETTINGS_MAP[i].name);
+
+  if (!g_strcmp0 (schema_id, "org.gnome.settings-daemon.plugins.xsettings"))
     {
-      g_value_set_boolean (value, TRUE);
-      return TRUE;
+      if (!g_strcmp0 (key, "enabled-gtk-modules"))
+        update_setting (screen, "gtk-modules");
+      else if (!g_strcmp0 (key, "disabled-gtk-modules"))
+        update_setting (screen, "gtk-modules");
+      else if (!g_strcmp0 (key, "antialiasing"))
+        update_setting (screen, "rgba-order");
     }
-
-  if (g_str_equal (name, "gtk-recent-files-max-age"))
+  else if (!g_strcmp0 (schema_id, "org.gnome.desktop.interface"))
     {
-      g_value_set_int (value, 30);
-      return TRUE;
+      if (!g_strcmp0 (key, "scaling-factor"))
+        {
+          update_setting (screen, "gtk-xft-dpi");
+          update_setting (screen, "gtk-cursor-theme-size");
+        }
     }
 
-  if (g_str_equal (name, "gtk-titlebar-double-click"))
+  g_free (schema_id);
+}
+
+static const gchar * const KNOWN_SETTINGS[] =
+{
+  "gtk-double-click-time",
+  "gtk-double-click-distance",
+  "gtk-cursor-blink",
+  "gtk-cursor-blink-time",
+  "gtk-cursor-blink-timeout",
+  "gtk-split-cursor",
+  "gtk-theme-name",
+  "gtk-icon-theme-name",
+  "gtk-fallback-icon-theme",
+  "gtk-key-theme-name",
+  "gtk-menu-bar-accel",
+  "gtk-dnd-drag-threshold",
+  "gtk-font-name",
+  "gtk-icon-sizes",
+  "gtk-modules",
+  "gtk-xft-antialias",
+  "gtk-xft-hinting",
+  "gtk-xft-hintstyle",
+  "gtk-xft-rgba",
+  "gtk-xft-dpi",
+  "gtk-cursor-theme-name",
+  "gtk-cursor-theme-size",
+  "gtk-alternative-button-order",
+  "gtk-alternative-sort-arrows",
+  "gtk-show-input-method-menu",
+  "gtk-show-unicode-menu",
+  "gtk-timeout-initial",
+  "gtk-timeout-repeat",
+  "gtk-timeout-expand",
+  "gtk-color-scheme",
+  "gtk-enable-animations",
+  "gtk-touchscreen-mode",
+  "gtk-tooltip-timeout",
+  "gtk-tooltip-browse-timeout",
+  "gtk-tooltip-browse-mode-timeout",
+  "gtk-keynav-cursor-only",
+  "gtk-keynav-wrap-around",
+  "gtk-error-bell",
+  "color-hash",
+  "gtk-file-chooser-backend",
+  "gtk-print-backends",
+  "gtk-print-preview-command",
+  "gtk-enable-mnemonics",
+  "gtk-enable-accels",
+  "gtk-recent-files-limit",
+  "gtk-im-module",
+  "gtk-recent-files-max-age",
+  "gtk-fontconfig-timestamp",
+  "gtk-sound-theme-name",
+  "gtk-enable-input-feedback-sounds",
+  "gtk-enable-event-sounds",
+  "gtk-enable-tooltips",
+  "gtk-toolbar-style",
+  "gtk-toolbar-icon-size",
+  "gtk-auto-mnemonics",
+  "gtk-primary-button-warps-slider",
+  "gtk-visible-focus",
+  "gtk-application-prefer-dark-theme",
+  "gtk-button-images",
+  "gtk-entry-select-on-focus",
+  "gtk-entry-password-hint-timeout",
+  "gtk-menu-images",
+  "gtk-menu-bar-popup-delay",
+  "gtk-scrolled-window-placement",
+  "gtk-can-change-accels",
+  "gtk-menu-popup-delay",
+  "gtk-menu-popdown-delay",
+  "gtk-label-select-on-focus",
+  "gtk-color-palette",
+  "gtk-im-preedit-style",
+  "gtk-im-status-style",
+  "gtk-shell-shows-app-menu",
+  "gtk-shell-shows-menubar",
+  "gtk-shell-shows-desktop",
+  "gtk-decoration-layout",
+  "gtk-titlebar-double-click",
+  "gtk-titlebar-middle-click",
+  "gtk-titlebar-right-click",
+  "gtk-dialogs-use-header",
+  "gtk-enable-primary-paste",
+  "gtk-recent-files-enabled",
+  "gtk-long-press-time",
+  "gtk-keynav-use-caret",
+  NULL
+};
+
+static gboolean
+gdk_mir_screen_get_setting (GdkScreen   *screen,
+                            const gchar *name,
+                            GValue      *value)
+{
+  GdkMirScreen *mir_screen;
+  GVariant *variant;
+
+  mir_screen = GDK_MIR_SCREEN (screen);
+  variant = g_hash_table_lookup (mir_screen->current_settings, name);
+
+  if (!variant)
+    update_setting (mir_screen, name);
+
+  variant = g_hash_table_lookup (mir_screen->current_settings, name);
+
+  if (!variant)
     {
-      g_value_set_string (value, "toggle-maximize");
-      return TRUE;
-    }
+      if (!g_strv_contains (KNOWN_SETTINGS, name))
+        g_warning ("unknown setting: %s", name);
 
-  g_warning ("unknown property %s", name);
+      return FALSE;
+    }
 
-  return FALSE;
+  g_dbus_gvariant_to_gvalue (variant, value);
+  return TRUE;
 }
 
 static gint
@@ -790,6 +1092,9 @@ gdk_mir_screen_init (GdkMirScreen *screen)
   screen->visual->screen = GDK_SCREEN (screen);
   screen->visual->type = VISUAL_TYPE;
   screen->visual->depth = VISUAL_DEPTH;
+
+  screen->settings_objects = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_object_unref);
+  screen->current_settings = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
 }
 
 static void
-- 
2.11.0

