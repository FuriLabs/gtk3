Description: Hide Headerbar window buttons and title when running in Unity
 and the window is maximized.
 Plus define the "toolbar-mode" style class on these maximized bars.
Author: Marco Trevisan <marco.trevisan@canonical.com>
Bug-Ubuntu: https://launchpad.net/bugs/1515810

Index: gtk+3.0-3.18.8/gtk/gtkheaderbar.c
===================================================================
--- gtk+3.0-3.18.8.orig/gtk/gtkheaderbar.c
+++ gtk+3.0-3.18.8/gtk/gtkheaderbar.c
@@ -31,6 +31,10 @@
 
 #include <string.h>
 
+#ifdef GDK_WINDOWING_X11
+#include "x11/gdkx.h"
+#endif
+
 /**
  * SECTION:gtkheaderbar
  * @Short_description: A box with a centered child
@@ -65,6 +69,7 @@ struct _GtkHeaderBarPrivate
   GtkWidget *custom_title;
   gint spacing;
   gboolean has_subtitle;
+  gboolean unity_environment;
 
   GList *children;
 
@@ -276,6 +281,37 @@ _gtk_header_bar_update_separator_visibil
     gtk_widget_set_visible (priv->titlebar_end_separator, have_visible_at_end);
 }
 
+static void
+check_title_visibility (GtkHeaderBar *bar)
+{
+  GtkHeaderBarPrivate *priv = gtk_header_bar_get_instance_private (bar);
+  gboolean show = TRUE;
+
+  if (!priv->title_label)
+    return;
+
+  if (priv->unity_environment)
+    {
+      GtkWidget *toplevel = gtk_widget_get_toplevel (GTK_WIDGET (bar));
+
+      if (GTK_IS_WINDOW (toplevel))
+        {
+          GtkWindow *window = GTK_WINDOW (toplevel);
+
+          if (gtk_window_is_maximized (window) &&
+              g_strcmp0 (gtk_window_get_title (window), priv->title) == 0)
+            {
+              show = FALSE;
+            }
+        }
+    }
+
+  if (show)
+    gtk_widget_show (priv->title_label);
+  else
+    gtk_widget_hide (priv->title_label);
+}
+
 void
 _gtk_header_bar_update_window_buttons (GtkHeaderBar *bar)
 {
@@ -307,6 +343,20 @@ _gtk_header_bar_update_window_buttons (G
     }
 
   priv->titlebar_icon = NULL;
+  window = GTK_WINDOW (gtk_widget_get_toplevel (widget));
+
+  if (priv->unity_environment)
+    {
+      check_title_visibility (bar);
+
+      if (gtk_window_is_maximized (window))
+        {
+          gtk_style_context_add_class (gtk_widget_get_style_context (widget), "toolbar-mode");
+          return;
+        }
+
+      gtk_style_context_remove_class (gtk_widget_get_style_context (widget), "toolbar-mode");
+    }
 
   if (!priv->shows_wm_decorations)
     return;
@@ -324,7 +374,6 @@ _gtk_header_bar_update_window_buttons (G
       layout_desc = g_strdup (priv->decoration_layout);
     }
 
-  window = GTK_WINDOW (gtk_widget_get_toplevel (widget));
 
   if (!shown_by_shell && gtk_window_get_application (window))
     menu = gtk_application_get_app_menu (gtk_window_get_application (window));
@@ -580,6 +629,8 @@ construct_label_box (GtkHeaderBar *bar)
                                       &priv->subtitle_label);
   gtk_header_bar_reorder_css_node (bar, GTK_PACK_START, priv->label_box);
   gtk_widget_set_parent (priv->label_box, GTK_WIDGET (bar));
+
+  check_title_visibility (bar);
 }
 
 static void
@@ -1214,6 +1265,7 @@ gtk_header_bar_set_title (GtkHeaderBar *
     }
 
   g_object_notify_by_pspec (G_OBJECT (bar), header_bar_props[PROP_TITLE]);
+  check_title_visibility (bar);
 }
 
 /**
@@ -1808,6 +1860,22 @@ gtk_header_bar_realize (GtkWidget *widge
 
   GTK_WIDGET_CLASS (gtk_header_bar_parent_class)->realize (widget);
 
+#ifdef GDK_WINDOWING_X11
+  GtkHeaderBar *bar;
+  GtkHeaderBarPrivate *priv;
+  GdkScreen *screen;
+
+  bar = GTK_HEADER_BAR (widget);
+  priv = gtk_header_bar_get_instance_private (bar);
+  screen = gtk_widget_get_screen (widget);
+
+  if (GDK_IS_X11_SCREEN (screen))
+    {
+      GdkAtom unity_atom = gdk_atom_intern_static_string ("_UNITY_SHELL");
+      priv->unity_environment = gdk_x11_screen_supports_net_wm_hint (screen, unity_atom);
+    }
+#endif
+
   settings = gtk_widget_get_settings (widget);
   g_signal_connect_swapped (settings, "notify::gtk-shell-shows-app-menu",
                             G_CALLBACK (_gtk_header_bar_update_window_buttons), widget);
@@ -1842,6 +1910,14 @@ window_state_changed (GtkWidget
 }
 
 static void
+on_window_title_changed (GObject      *window,
+                         GParamSpec   *pspec,
+                         GtkHeaderBar *bar)
+{
+  check_title_visibility (bar);
+}
+
+static void
 gtk_header_bar_hierarchy_changed (GtkWidget *widget,
                                   GtkWidget *previous_toplevel)
 {
@@ -1850,12 +1926,20 @@ gtk_header_bar_hierarchy_changed (GtkWid
   toplevel = gtk_widget_get_toplevel (widget);
 
   if (previous_toplevel)
-    g_signal_handlers_disconnect_by_func (previous_toplevel,
-                                          window_state_changed, widget);
+    {
+      g_signal_handlers_disconnect_by_func (previous_toplevel,
+                                            window_state_changed, widget);
+      g_signal_handlers_disconnect_by_func (previous_toplevel,
+                                            on_window_title_changed, widget);
+    }
 
   if (toplevel)
-    g_signal_connect_after (toplevel, "window-state-event",
-                            G_CALLBACK (window_state_changed), widget);
+    {
+      g_signal_connect_after (toplevel, "window-state-event",
+                              G_CALLBACK (window_state_changed), widget);
+      g_signal_connect (toplevel, "notify::title",
+                        G_CALLBACK (on_window_title_changed), widget);
+    }
 }
 
 static void
