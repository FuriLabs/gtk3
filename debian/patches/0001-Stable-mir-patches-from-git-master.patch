From 0cfb9f1d7376e5fd5ea1eda9e5f9aa26e6411730 Mon Sep 17 00:00:00 2001
From: William Hua <william.hua@canonical.com>
Date: Tue, 7 Apr 2015 10:33:35 -0400
Subject: [PATCH] Stable mir patches from git master.

---
 gdk/mir/gdkmir-debug.c      | 263 +++++++++-----------------
 gdk/mir/gdkmir-private.h    |  20 +-
 gdk/mir/gdkmirdisplay.c     |  72 +++----
 gdk/mir/gdkmireventsource.c | 325 +++++++++++++++++---------------
 gdk/mir/gdkmirscreen.c      |  42 ++---
 gdk/mir/gdkmirwindowimpl.c  | 446 +++++++++++++++++---------------------------
 6 files changed, 498 insertions(+), 670 deletions(-)

diff --git a/gdk/mir/gdkmir-debug.c b/gdk/mir/gdkmir-debug.c
index 4dd3ece..a135f1b 100644
--- a/gdk/mir/gdkmir-debug.c
+++ b/gdk/mir/gdkmir-debug.c
@@ -21,225 +21,132 @@ void
 _gdk_mir_print_modifiers (unsigned int modifiers)
 {
   g_printerr (" Modifiers");
-  if ((modifiers & mir_key_modifier_alt) != 0)
+  if ((modifiers & mir_input_event_modifier_alt) != 0)
     g_printerr (" alt");
-  if ((modifiers & mir_key_modifier_alt_left) != 0)
+  if ((modifiers & mir_input_event_modifier_alt_left) != 0)
     g_printerr (" alt-left");
-  if ((modifiers & mir_key_modifier_alt_right) != 0)
+  if ((modifiers & mir_input_event_modifier_alt_right) != 0)
     g_printerr (" alt-right");
-  if ((modifiers & mir_key_modifier_shift) != 0)
+  if ((modifiers & mir_input_event_modifier_shift) != 0)
     g_printerr (" shift");
-  if ((modifiers & mir_key_modifier_shift_left) != 0)
+  if ((modifiers & mir_input_event_modifier_shift_left) != 0)
     g_printerr (" shift-left");
-  if ((modifiers & mir_key_modifier_shift_right) != 0)
+  if ((modifiers & mir_input_event_modifier_shift_right) != 0)
     g_printerr (" shift-right");
-  if ((modifiers & mir_key_modifier_sym) != 0)
+  if ((modifiers & mir_input_event_modifier_sym) != 0)
     g_printerr (" sym");
-  if ((modifiers & mir_key_modifier_function) != 0)
+  if ((modifiers & mir_input_event_modifier_function) != 0)
     g_printerr (" function");
-  if ((modifiers & mir_key_modifier_ctrl) != 0)
+  if ((modifiers & mir_input_event_modifier_ctrl) != 0)
     g_printerr (" ctrl");
-  if ((modifiers & mir_key_modifier_ctrl_left) != 0)
+  if ((modifiers & mir_input_event_modifier_ctrl_left) != 0)
     g_printerr (" ctrl-left");
-  if ((modifiers & mir_key_modifier_ctrl_right) != 0)
+  if ((modifiers & mir_input_event_modifier_ctrl_right) != 0)
     g_printerr (" ctrl-right");
-  if ((modifiers & mir_key_modifier_meta) != 0)
+  if ((modifiers & mir_input_event_modifier_meta) != 0)
     g_printerr (" meta");
-  if ((modifiers & mir_key_modifier_meta_left) != 0)
+  if ((modifiers & mir_input_event_modifier_meta_left) != 0)
     g_printerr (" meta-left");
-  if ((modifiers & mir_key_modifier_meta_right) != 0)
+  if ((modifiers & mir_input_event_modifier_meta_right) != 0)
     g_printerr (" meta-right");
-  if ((modifiers & mir_key_modifier_caps_lock) != 0)
+  if ((modifiers & mir_input_event_modifier_caps_lock) != 0)
     g_printerr (" caps-lock");
-  if ((modifiers & mir_key_modifier_num_lock) != 0)
+  if ((modifiers & mir_input_event_modifier_num_lock) != 0)
     g_printerr (" num-lock");
-  if ((modifiers & mir_key_modifier_scroll_lock) != 0)
+  if ((modifiers & mir_input_event_modifier_scroll_lock) != 0)
     g_printerr (" scroll-lock");
   g_printerr ("\n");
 }
 
 void
-_gdk_mir_print_key_event (const MirKeyEvent *event)
+_gdk_mir_print_key_event (const MirInputEvent *event)
 {
+  const MirKeyboardEvent *keyboard_event = mir_input_event_get_keyboard_event (event);
+
+  if (!keyboard_event)
+    return;
+
   g_printerr ("KEY\n");
-  g_printerr (" Device %i\n", event->device_id);
-  g_printerr (" Source %i\n", event->source_id);
+  g_printerr (" Device %lld\n", (long long int) mir_input_event_get_device_id (event));
   g_printerr (" Action ");
-  switch (event->action)
+  switch (mir_keyboard_event_action (keyboard_event))
     {
-    case mir_key_action_down:
+    case mir_keyboard_action_down:
       g_printerr ("down");
       break;
-    case mir_key_action_up:
+    case mir_keyboard_action_up:
       g_printerr ("up");
       break;
-    case mir_key_action_multiple:
-      g_printerr ("multiple");
+    case mir_keyboard_action_repeat:
+      g_printerr ("repeat");
       break;
     default:
-      g_printerr ("%u", event->action);
+      g_printerr ("%u", mir_keyboard_event_action (keyboard_event));
       break;
     }
   g_printerr ("\n");
-  g_printerr (" Flags");
-  if ((event->flags & mir_key_flag_woke_here) != 0)
-    g_printerr (" woke-here");
-  if ((event->flags & mir_key_flag_soft_keyboard) != 0)
-    g_printerr (" soft-keyboard");
-  if ((event->flags & mir_key_flag_keep_touch_mode) != 0)
-    g_printerr (" keep-touch-mode");
-  if ((event->flags & mir_key_flag_from_system) != 0)
-    g_printerr (" from-system");
-  if ((event->flags & mir_key_flag_editor_action) != 0)
-    g_printerr (" editor-action");
-  if ((event->flags & mir_key_flag_canceled) != 0)
-    g_printerr (" canceled");
-  if ((event->flags & mir_key_flag_virtual_hard_key) != 0)
-    g_printerr (" virtual-hard-key");
-  if ((event->flags & mir_key_flag_long_press) != 0)
-    g_printerr (" long-press");
-  if ((event->flags & mir_key_flag_canceled_long_press) != 0)
-    g_printerr (" canceled-long-press");
-  if ((event->flags & mir_key_flag_tracking) != 0)
-    g_printerr (" tracking");
-  if ((event->flags & mir_key_flag_fallback) != 0)
-    g_printerr (" fallback");
-  g_printerr ("\n");
-  _gdk_mir_print_modifiers (event->modifiers);
-  g_printerr (" Key Code %i\n", event->key_code);
-  g_printerr (" Scan Code %i\n", event->scan_code);
-  g_printerr (" Repeat Count %i\n", event->repeat_count);
-  g_printerr (" Down Time %lli\n", (long long int) event->down_time);
-  g_printerr (" Event Time %lli\n", (long long int) event->event_time);
-  g_printerr (" Is System Key %s\n", event->is_system_key ? "true" : "false");
+  _gdk_mir_print_modifiers (mir_keyboard_event_modifiers (keyboard_event));
+  g_printerr (" Key Code %i\n", mir_keyboard_event_key_code (keyboard_event));
+  g_printerr (" Scan Code %i\n", mir_keyboard_event_scan_code (keyboard_event));
+  g_printerr (" Event Time %lli\n", (long long int) mir_input_event_get_event_time (event));
 }
 
 void
-_gdk_mir_print_motion_event (const MirMotionEvent *event)
+_gdk_mir_print_motion_event (const MirInputEvent *event)
 {
-  size_t i;
+  const MirPointerEvent *pointer_event = mir_input_event_get_pointer_event (event);
+
+  if (!pointer_event)
+    return;
 
   g_printerr ("MOTION\n");
-  g_printerr (" Device %i\n", event->device_id);
-  g_printerr (" Source %i\n", event->source_id);
+  g_printerr (" Device %lld\n", (long long int) mir_input_event_get_device_id (event));
   g_printerr (" Action ");
-  switch (event->action)
+  switch (mir_pointer_event_action (pointer_event))
     {
-    case mir_motion_action_down:
+    case mir_pointer_action_button_down:
       g_printerr ("down");
       break;
-    case mir_motion_action_up:
+    case mir_pointer_action_button_up:
       g_printerr ("up");
       break;
-    case mir_motion_action_move:
-      g_printerr ("move");
-      break;
-    case mir_motion_action_cancel:
-      g_printerr ("cancel");
-      break;
-    case mir_motion_action_outside:
-      g_printerr ("outside");
-      break;
-    case mir_motion_action_pointer_down:
-      g_printerr ("pointer-down");
-      break;
-    case mir_motion_action_pointer_up:
-      g_printerr ("pointer-up");
+    case mir_pointer_action_enter:
+      g_printerr ("enter");
       break;
-    case mir_motion_action_hover_move:
-      g_printerr ("hover-move");
+    case mir_pointer_action_leave:
+      g_printerr ("leave");
       break;
-    case mir_motion_action_scroll:
-      g_printerr ("scroll");
-      break;
-    case mir_motion_action_hover_enter:
-      g_printerr ("hover-enter");
-      break;
-    case mir_motion_action_hover_exit:
-      g_printerr ("hover-exit");
+    case mir_pointer_action_motion:
+      g_printerr ("motion");
       break;
     default:
-      g_printerr ("%u", event->action);
+      g_printerr ("%u", mir_pointer_event_action (pointer_event));
     }
   g_printerr ("\n");
-  g_printerr (" Flags");
-  switch (event->flags)
-    {
-    case mir_motion_flag_window_is_obscured:
-      g_printerr (" window-is-obscured");
-      break;
-    }
-  g_printerr ("\n");
-  _gdk_mir_print_modifiers (event->modifiers);
-  g_printerr (" Edge Flags %i\n", event->edge_flags);
+  _gdk_mir_print_modifiers (mir_pointer_event_modifiers (pointer_event));
   g_printerr (" Button State");
-  switch (event->button_state)
-    {
-    case mir_motion_button_primary:
-      g_printerr (" primary");
-      break;
-    case mir_motion_button_secondary:
-      g_printerr (" secondary");
-      break;
-    case mir_motion_button_tertiary:
-      g_printerr (" tertiary");
-      break;
-    case mir_motion_button_back:
-      g_printerr (" back");
-      break;
-    case mir_motion_button_forward:
-      g_printerr (" forward");
-      break;
-    }
+  if (mir_pointer_event_button_state (pointer_event, mir_pointer_button_primary))
+    g_printerr (" primary");
+  if (mir_pointer_event_button_state (pointer_event, mir_pointer_button_secondary))
+    g_printerr (" secondary");
+  if (mir_pointer_event_button_state (pointer_event, mir_pointer_button_tertiary))
+    g_printerr (" tertiary");
+  if (mir_pointer_event_button_state (pointer_event, mir_pointer_button_back))
+    g_printerr (" back");
+  if (mir_pointer_event_button_state (pointer_event, mir_pointer_button_forward))
+    g_printerr (" forward");
   g_printerr ("\n");
-  g_printerr (" Offset (%f, %f)\n", event->x_offset, event->y_offset);
-  g_printerr (" Precision (%f, %f)\n", event->x_precision, event->y_precision);
-  g_printerr (" Down Time %lli\n", (long long int) event->down_time);
-  g_printerr (" Event Time %lli\n", (long long int) event->event_time);
-  g_printerr (" Pointer Coordinates\n");
-  for (i = 0; i < event->pointer_count; i++)
-    {
-      g_printerr ("  ID=%i location=(%f, %f) raw=(%f, %f) touch=(%f, %f) size=%f pressure=%f orientation=%f scroll=(%f, %f) tool=",
-                  event->pointer_coordinates[i].id,
-                  event->pointer_coordinates[i].x, event->pointer_coordinates[i].y,
-                  event->pointer_coordinates[i].raw_x, event->pointer_coordinates[i].raw_y,
-                  event->pointer_coordinates[i].touch_major, event->pointer_coordinates[i].touch_minor,
-                  event->pointer_coordinates[i].size,
-                  event->pointer_coordinates[i].pressure,
-                  event->pointer_coordinates[i].orientation,
-                  event->pointer_coordinates[i].hscroll, event->pointer_coordinates[i].vscroll);
-      switch (event->pointer_coordinates[i].tool_type)
-        {
-        case mir_motion_tool_type_unknown:
-          g_printerr ("unknown");
-          break;
-        case mir_motion_tool_type_finger:
-          g_printerr ("finger");
-          break;
-        case mir_motion_tool_type_stylus:
-          g_printerr ("stylus");
-          break;
-        case mir_motion_tool_type_mouse:
-          g_printerr ("mouse");
-          break;
-        case mir_motion_tool_type_eraser:
-          g_printerr ("eraser");
-          break;
-        default:
-          g_printerr ("%u", event->pointer_coordinates[i].tool_type);
-          break;
-        }
-      g_printerr ("\n");
-    }
+  g_printerr (" Offset (%f, %f)\n", mir_pointer_event_axis_value (pointer_event, mir_pointer_axis_x),
+                                    mir_pointer_event_axis_value (pointer_event, mir_pointer_axis_y));
+  g_printerr (" Event Time %lli\n", (long long int) mir_input_event_get_event_time (event));
 }
 
 void
 _gdk_mir_print_surface_event (const MirSurfaceEvent *event)
 {
   g_printerr ("SURFACE\n");
-  g_printerr (" Surface %i\n", event->id);
   g_printerr (" Attribute ");
-  switch (event->attrib)
+  switch (mir_surface_event_get_attribute (event))
     {
     case mir_surface_attrib_type:
       g_printerr ("type");
@@ -254,50 +161,66 @@ _gdk_mir_print_surface_event (const MirSurfaceEvent *event)
       g_printerr ("focus");
       break;
     default:
-      g_printerr ("%u", event->attrib);
+      g_printerr ("%u", mir_surface_event_get_attribute (event));
       break;
     }
   g_printerr ("\n");
-  g_printerr (" Value %i\n", event->value);
+  g_printerr (" Value %i\n", mir_surface_event_get_attribute_value (event));
 }
 
 void
 _gdk_mir_print_resize_event (const MirResizeEvent *event)
 {
   g_printerr ("RESIZE\n");
-  g_printerr (" Surface %i\n", event->surface_id);
-  g_printerr (" Size (%i, %i)\n", event->width, event->height);
+  g_printerr (" Size (%i, %i)\n", mir_resize_event_get_width (event), mir_resize_event_get_height (event));
 }
 
 void
 _gdk_mir_print_close_event (const MirCloseSurfaceEvent *event)
 {
   g_printerr ("CLOSED\n");
-  g_printerr (" Surface %i\n", event->surface_id);
 }
 
 void
 _gdk_mir_print_event (const MirEvent *event)
 {
-  switch (event->type)
+  const MirInputEvent *input_event;
+
+  switch (mir_event_get_type (event))
     {
+    case mir_event_type_input:
+      input_event = mir_event_get_input_event (event);
+
+      switch (mir_input_event_get_type (input_event))
+        {
+          case mir_input_event_type_key:
+            _gdk_mir_print_key_event (mir_event_get_input_event (event));
+            break;
+          case mir_input_event_type_touch:
+            _gdk_mir_print_motion_event (mir_event_get_input_event (event));
+            break;
+          case mir_input_event_type_pointer:
+            _gdk_mir_print_motion_event (mir_event_get_input_event (event));
+            break;
+        }
+      break;
     case mir_event_type_key:
-      _gdk_mir_print_key_event (&event->key);
+      _gdk_mir_print_key_event (mir_event_get_input_event (event));
       break;
     case mir_event_type_motion:
-      _gdk_mir_print_motion_event (&event->motion);
+      _gdk_mir_print_motion_event (mir_event_get_input_event (event));
       break;
     case mir_event_type_surface:
-      _gdk_mir_print_surface_event (&event->surface);
+      _gdk_mir_print_surface_event (mir_event_get_surface_event (event));
       break;
     case mir_event_type_resize:
-      _gdk_mir_print_resize_event (&event->resize);
+      _gdk_mir_print_resize_event (mir_event_get_resize_event (event));
       break;
     case mir_event_type_close_surface:
-      _gdk_mir_print_close_event (&event->close_surface);
+      _gdk_mir_print_close_event (mir_event_get_close_surface_event (event));
       break;
     default:
-      g_printerr ("EVENT %u\n", event->type);
+      g_printerr ("EVENT %u\n", mir_event_get_type (event));
       break;
     }
 }
diff --git a/gdk/mir/gdkmir-private.h b/gdk/mir/gdkmir-private.h
index 6f0b6c3..2464434 100644
--- a/gdk/mir/gdkmir-private.h
+++ b/gdk/mir/gdkmir-private.h
@@ -89,9 +89,9 @@ void _gdk_mir_window_impl_set_surface_state (GdkMirWindowImpl *impl, MirSurfaceS
 
 void _gdk_mir_window_impl_set_surface_type (GdkMirWindowImpl *impl, MirSurfaceType type);
 
-void _gdk_mir_window_impl_set_cursor_state (GdkMirWindowImpl *impl, gdouble x, gdouble y, gboolean cursor_inside, MirMotionButton button_state);
+void _gdk_mir_window_impl_set_cursor_state (GdkMirWindowImpl *impl, gdouble x, gdouble y, gboolean cursor_inside, guint button_state);
 
-void _gdk_mir_window_impl_get_cursor_state (GdkMirWindowImpl *impl, gdouble *x, gdouble *y, gboolean *cursor_inside, MirMotionButton *button_state);
+void _gdk_mir_window_impl_get_cursor_state (GdkMirWindowImpl *impl, gdouble *x, gdouble *y, gboolean *cursor_inside, guint *button_state);
 
 GdkMirEventSource *_gdk_mir_display_get_event_source (GdkDisplay *display);
 
@@ -123,9 +123,9 @@ EGLSurface _gdk_mir_window_get_dummy_egl_surface (GdkWindow *window, EGLConfig c
 
 void _gdk_mir_print_modifiers (unsigned int modifiers);
 
-void _gdk_mir_print_key_event (const MirKeyEvent *event);
+void _gdk_mir_print_key_event (const MirInputEvent *event);
 
-void _gdk_mir_print_motion_event (const MirMotionEvent *event);
+void _gdk_mir_print_motion_event (const MirInputEvent *event);
 
 void _gdk_mir_print_surface_event (const MirSurfaceEvent *event);
 
@@ -133,16 +133,4 @@ void _gdk_mir_print_resize_event (const MirResizeEvent *event);
 
 void _gdk_mir_print_event (const MirEvent *event);
 
-/* TODO: Remove once we have proper transient window support. */
-GdkWindow * _gdk_mir_window_get_visible_transient_child (GdkWindow *window,
-                                                         gdouble    x,
-                                                         gdouble    y,
-                                                         gdouble   *out_x,
-                                                         gdouble   *out_y);
-
-/* TODO: Remove once we have proper transient window support. */
-void _gdk_mir_window_transient_children_foreach (GdkWindow  *window,
-                                                 void      (*func) (GdkWindow *, gpointer),
-                                                 gpointer    user_data);
-
 #endif /* __GDK_PRIVATE_MIR_H__ */
diff --git a/gdk/mir/gdkmirdisplay.c b/gdk/mir/gdkmirdisplay.c
index cc92a53..6eda352 100644
--- a/gdk/mir/gdkmirdisplay.c
+++ b/gdk/mir/gdkmirdisplay.c
@@ -107,7 +107,7 @@ _gdk_mir_display_open (const gchar *display_name)
   MirPixelFormat sw_pixel_format, hw_pixel_format;
   GdkMirDisplay *display;
 
-  g_printerr ("gdk_mir_display_open\n");
+  //g_printerr ("gdk_mir_display_open\n");
 
   connection = mir_connect_sync (NULL, "GDK-Mir");
   if (!connection)
@@ -207,26 +207,26 @@ gdk_mir_display_get_default_screen (GdkDisplay *display)
 static void
 gdk_mir_display_beep (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_beep\n");
+  //g_printerr ("gdk_mir_display_beep\n");
   /* No system level beep... */
 }
 
 static void
 gdk_mir_display_sync (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_sync\n");
+  //g_printerr ("gdk_mir_display_sync\n");
 }
 
 static void
 gdk_mir_display_flush (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_flush\n");
+  //g_printerr ("gdk_mir_display_flush\n");
 }
 
 static gboolean
 gdk_mir_display_has_pending (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_has_pending\n");
+  //g_printerr ("gdk_mir_display_has_pending\n");
   /* We don't need to poll for events - so nothing pending */
   return FALSE;
 }
@@ -247,14 +247,14 @@ gdk_mir_display_make_default (GdkDisplay *display)
 static GdkWindow *
 gdk_mir_display_get_default_group (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_get_default_group\n");
+  //g_printerr ("gdk_mir_display_get_default_group\n");
   return NULL;
 }
 
 static gboolean
 gdk_mir_display_supports_shapes (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_supports_shapes\n");
+  //g_printerr ("gdk_mir_display_supports_shapes\n");
   /* Mir doesn't support shaped windows */
   return FALSE;
 }
@@ -262,42 +262,42 @@ gdk_mir_display_supports_shapes (GdkDisplay *display)
 static gboolean
 gdk_mir_display_supports_input_shapes (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_supports_input_shapes\n");
+  //g_printerr ("gdk_mir_display_supports_input_shapes\n");
   return FALSE;
 }
 
 static gboolean
 gdk_mir_display_supports_composite (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_supports_composite\n");
+  //g_printerr ("gdk_mir_display_supports_composite\n");
   return FALSE;
 }
 
 static gboolean
 gdk_mir_display_supports_clipboard_persistence (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_supports_clipboard_persistence\n");
+  //g_printerr ("gdk_mir_display_supports_clipboard_persistence\n");
   return FALSE;
 }
 
 static gboolean
 gdk_mir_display_supports_cursor_alpha (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_supports_cursor_alpha\n");
+  //g_printerr ("gdk_mir_display_supports_cursor_alpha\n");
   return FALSE;
 }
 
 static gboolean
 gdk_mir_display_supports_cursor_color (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_supports_cursor_color\n");
+  //g_printerr ("gdk_mir_display_supports_cursor_color\n");
   return FALSE;
 }
 
 static gboolean
 gdk_mir_display_supports_selection_notification (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_supports_selection_notification\n");
+  //g_printerr ("gdk_mir_display_supports_selection_notification\n");
   return FALSE;
 }
 
@@ -305,7 +305,7 @@ static gboolean
 gdk_mir_display_request_selection_notification (GdkDisplay *display,
                                                 GdkAtom     selection)
 {
-  g_printerr ("gdk_mir_display_request_selection_notification\n");
+  //g_printerr ("gdk_mir_display_request_selection_notification\n");
   return FALSE;
 }
 
@@ -316,7 +316,7 @@ gdk_mir_display_store_clipboard (GdkDisplay    *display,
                                  const GdkAtom *targets,
                                  gint           n_targets)
 {
-  g_printerr ("gdk_mir_display_store_clipboard\n");
+  //g_printerr ("gdk_mir_display_store_clipboard\n");
 }
 
 static void
@@ -324,7 +324,7 @@ gdk_mir_display_get_default_cursor_size (GdkDisplay *display,
                                          guint      *width,
                                          guint      *height)
 {
-  g_printerr ("gdk_mir_display_get_default_cursor_size\n");
+  //g_printerr ("gdk_mir_display_get_default_cursor_size\n");
   *width = *height = 32; // FIXME: Random value
 }
 
@@ -333,7 +333,7 @@ gdk_mir_display_get_maximal_cursor_size (GdkDisplay *display,
                                          guint      *width,
                                          guint      *height)
 {
-  g_printerr ("gdk_mir_display_get_maximal_cursor_size\n");
+  //g_printerr ("gdk_mir_display_get_maximal_cursor_size\n");
   *width = *height = 32; // FIXME: Random value
 }
 
@@ -357,14 +357,14 @@ gdk_mir_display_get_cursor_for_surface (GdkDisplay      *display,
                                         gdouble          x,
                                         gdouble          y)
 {
-  g_printerr ("gdk_mir_display_get_cursor_for_surface (%f, %f)\n", x, y);
+  //g_printerr ("gdk_mir_display_get_cursor_for_surface (%f, %f)\n", x, y);
   return NULL;
 }
 
 static GList *
 gdk_mir_display_list_devices (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_list_devices\n");
+  //g_printerr ("gdk_mir_display_list_devices\n");
   // FIXME: Should this access the device manager?
   return NULL;
 }
@@ -372,20 +372,20 @@ gdk_mir_display_list_devices (GdkDisplay *display)
 static GdkAppLaunchContext *
 gdk_mir_display_get_app_launch_context (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_get_app_launch_context\n");
+  //g_printerr ("gdk_mir_display_get_app_launch_context\n");
   return NULL;
 }
 
 static void
 gdk_mir_display_before_process_all_updates (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_before_process_all_updates\n");
+  //g_printerr ("gdk_mir_display_before_process_all_updates\n");
 }
 
 static void
 gdk_mir_display_after_process_all_updates (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_after_process_all_updates\n");
+  //g_printerr ("gdk_mir_display_after_process_all_updates\n");
 }
 
 static gulong
@@ -411,11 +411,11 @@ gdk_mir_display_create_window_impl (GdkDisplay    *display,
                                     GdkWindowAttr *attributes,
                                     gint           attributes_mask)
 {
-  g_printerr ("gdk_mir_display_create_window_impl");
-  g_printerr (" window=%p", window);
-  g_printerr (" location=(%d, %d)", window->x, window->y);
-  g_printerr (" size=(%d, %d)", window->width, window->height);
-  g_printerr ("\n");
+  //g_printerr ("gdk_mir_display_create_window_impl");
+  //g_printerr (" window=%p", window);
+  //g_printerr (" location=(%d, %d)", window->x, window->y);
+  //g_printerr (" size=(%d, %d)", window->width, window->height);
+  //g_printerr ("\n");
 
   if (attributes->wclass == GDK_INPUT_OUTPUT)
     {
@@ -442,14 +442,14 @@ gdk_mir_display_get_keymap (GdkDisplay *display)
 static void
 gdk_mir_display_push_error_trap (GdkDisplay *display)
 {
-  g_printerr ("gdk_mir_display_push_error_trap\n");
+  //g_printerr ("gdk_mir_display_push_error_trap\n");
 }
 
 static gint
 gdk_mir_display_pop_error_trap (GdkDisplay *display,
                                 gboolean    ignored)
 {
-  g_printerr ("gdk_mir_display_pop_error_trap\n");
+  //g_printerr ("gdk_mir_display_pop_error_trap\n");
   return 0;
 }
 
@@ -457,7 +457,7 @@ static GdkWindow *
 gdk_mir_display_get_selection_owner (GdkDisplay *display,
                                      GdkAtom     selection)
 {
-  g_printerr ("gdk_mir_display_get_selection_owner\n");
+  //g_printerr ("gdk_mir_display_get_selection_owner\n");
   return NULL;
 }
 
@@ -468,7 +468,7 @@ gdk_mir_display_set_selection_owner (GdkDisplay *display,
                                      guint32     time,
                                      gboolean    send_event)
 {
-  g_printerr ("gdk_mir_display_set_selection_owner\n");
+  //g_printerr ("gdk_mir_display_set_selection_owner\n");
   return FALSE;
 }
 
@@ -480,7 +480,7 @@ gdk_mir_display_send_selection_notify (GdkDisplay *display,
                                        GdkAtom     property,
                                        guint32     time)
 {
-  g_printerr ("gdk_mir_display_send_selection_notify\n");
+  //g_printerr ("gdk_mir_display_send_selection_notify\n");
 }
 
 static gint
@@ -490,7 +490,7 @@ gdk_mir_display_get_selection_property (GdkDisplay  *display,
                                         GdkAtom     *ret_type,
                                         gint        *ret_format)
 {
-  g_printerr ("gdk_mir_display_get_selection_property\n");
+  //g_printerr ("gdk_mir_display_get_selection_property\n");
   return 0;
 }
 
@@ -501,7 +501,7 @@ gdk_mir_display_convert_selection (GdkDisplay *display,
                                    GdkAtom     target,
                                    guint32     time)
 {
-  g_printerr ("gdk_mir_display_convert_selection\n");
+  //g_printerr ("gdk_mir_display_convert_selection\n");
 }
 
 static gint
@@ -512,7 +512,7 @@ gdk_mir_display_text_property_to_utf8_list (GdkDisplay    *display,
                                             gint           length,
                                             gchar       ***list)
 {
-  g_printerr ("gdk_mir_display_text_property_to_utf8_list\n");
+  //g_printerr ("gdk_mir_display_text_property_to_utf8_list\n");
   return 0;
 }
 
@@ -520,7 +520,7 @@ static gchar *
 gdk_mir_display_utf8_to_string_target (GdkDisplay  *display,
                                        const gchar *str)
 {
-  g_printerr ("gdk_mir_display_utf8_to_string_target\n");
+  //g_printerr ("gdk_mir_display_utf8_to_string_target\n");
   return NULL;
 }
 
diff --git a/gdk/mir/gdkmireventsource.c b/gdk/mir/gdkmireventsource.c
index b908366..c088ca4 100644
--- a/gdk/mir/gdkmireventsource.c
+++ b/gdk/mir/gdkmireventsource.c
@@ -32,7 +32,7 @@ struct _GdkMirWindowReference {
 
 typedef struct {
   GdkMirWindowReference *window_ref;
-  MirEvent               event;
+  const MirEvent        *event;
 } GdkMirQueuedEvent;
 
 struct _GdkMirEventSource
@@ -240,50 +240,66 @@ get_modifier_state (unsigned int modifiers, unsigned int button_state)
 {
   guint modifier_state = 0;
 
-  if ((modifiers & mir_key_modifier_alt) != 0)
+  if ((modifiers & (mir_input_event_modifier_alt |
+                    mir_input_event_modifier_alt_left |
+                    mir_input_event_modifier_alt_right)) != 0)
     modifier_state |= GDK_MOD1_MASK;
-  if ((modifiers & mir_key_modifier_shift) != 0)
+  if ((modifiers & (mir_input_event_modifier_shift |
+                    mir_input_event_modifier_shift_left |
+                    mir_input_event_modifier_shift_right)) != 0)
     modifier_state |= GDK_SHIFT_MASK;
-  if ((modifiers & mir_key_modifier_ctrl) != 0)
+  if ((modifiers & (mir_input_event_modifier_ctrl |
+                    mir_input_event_modifier_ctrl_left |
+                    mir_input_event_modifier_ctrl_right)) != 0)
     modifier_state |= GDK_CONTROL_MASK;
-  if ((modifiers & mir_key_modifier_meta) != 0)
-    modifier_state |= GDK_SUPER_MASK;
-  if ((modifiers & mir_key_modifier_caps_lock) != 0)
+  if ((modifiers & (mir_input_event_modifier_meta |
+                    mir_input_event_modifier_meta_left |
+                    mir_input_event_modifier_meta_right)) != 0)
+    modifier_state |= GDK_META_MASK;
+  if ((modifiers & mir_input_event_modifier_caps_lock) != 0)
     modifier_state |= GDK_LOCK_MASK;
-  if ((button_state & mir_motion_button_primary) != 0)
+  if ((button_state & mir_pointer_button_primary) != 0)
     modifier_state |= GDK_BUTTON1_MASK;
-  if ((button_state & mir_motion_button_secondary) != 0)
-    modifier_state |= GDK_BUTTON3_MASK;
-  if ((button_state & mir_motion_button_tertiary) != 0)
+  if ((button_state & mir_pointer_button_secondary) != 0)
     modifier_state |= GDK_BUTTON2_MASK;
+  if ((button_state & mir_pointer_button_tertiary) != 0)
+    modifier_state |= GDK_BUTTON3_MASK;
+  if ((button_state & mir_pointer_button_back) != 0)
+    modifier_state |= GDK_BUTTON4_MASK;
+  if ((button_state & mir_pointer_button_forward) != 0)
+    modifier_state |= GDK_BUTTON5_MASK;
 
   return modifier_state;
 }
 
 static void
-handle_key_event (GdkWindow *window, const MirKeyEvent *event)
+handle_key_event (GdkWindow *window, const MirInputEvent *event)
 {
+  const MirKeyboardEvent *keyboard_event = mir_input_event_get_keyboard_event (event);
   GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
   GdkKeymap *keymap;
   guint modifier_state;
-  MirMotionButton button_state;
+  guint button_state;
+
+  if (!keyboard_event)
+    return;
 
-  switch (event->action)
+  switch (mir_keyboard_event_action (keyboard_event))
     {
-    case mir_key_action_down:
-    case mir_key_action_up:
+    case mir_keyboard_action_up:
+    case mir_keyboard_action_down:
       // FIXME: Convert keycode
       _gdk_mir_window_impl_get_cursor_state (impl, NULL, NULL, NULL, &button_state);
-      modifier_state = get_modifier_state (event->modifiers, button_state);
+      modifier_state = get_modifier_state (mir_keyboard_event_modifiers (keyboard_event), button_state);
       keymap = gdk_keymap_get_for_display (gdk_window_get_display (window));
 
       generate_key_event (window,
-                          event->action == mir_key_action_down ? GDK_KEY_PRESS : GDK_KEY_RELEASE,
+                          mir_keyboard_event_action (keyboard_event) == mir_keyboard_action_down ? GDK_KEY_PRESS : GDK_KEY_RELEASE,
                           modifier_state,
-                          event->key_code,
-                          event->scan_code,
-                          _gdk_mir_keymap_key_is_modifier (keymap, event->key_code),
-                          NANO_TO_MILLI (event->event_time));
+                          mir_keyboard_event_key_code (keyboard_event),
+                          mir_keyboard_event_scan_code (keyboard_event),
+                          _gdk_mir_keymap_key_is_modifier (keymap, mir_keyboard_event_key_code (keyboard_event)),
+                          NANO_TO_MILLI (mir_input_event_get_event_time (event)));
       break;
     default:
     //case mir_key_action_multiple:
@@ -292,143 +308,100 @@ handle_key_event (GdkWindow *window, const MirKeyEvent *event)
     }
 }
 
-/* TODO: Remove once we have proper transient window support. */
-typedef struct
-{
-  GdkWindow *except;
-  gdouble    x;
-  gdouble    y;
-  guint32    time;
-} LeaveInfo;
-
-/* TODO: Remove once we have proper transient window support. */
-/*
- * leave_windows_except:
- *
- * Generate a leave event for every window except the one the cursor is in.
- */
-static void
-leave_windows_except (GdkWindow *window,
-                      gpointer   user_data)
-{
-  LeaveInfo info = *((LeaveInfo *) user_data);
-
-  info.x -= window->x;
-  info.y -= window->y;
-
-  _gdk_mir_window_transient_children_foreach (window, leave_windows_except, &info);
-
-  if (window != info.except)
-    {
-      GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
-      gboolean cursor_inside;
-      MirMotionButton button_state;
-
-      _gdk_mir_window_impl_get_cursor_state (impl, NULL, NULL, &cursor_inside, &button_state);
-
-      if (cursor_inside)
-        generate_crossing_event (window, GDK_LEAVE_NOTIFY, info.x, info.y, info.time);
-
-      _gdk_mir_window_impl_set_cursor_state (impl, info.x, info.y, FALSE, button_state);
-    }
+static guint
+mir_pointer_event_get_button_state (const MirPointerEvent *event)
+{
+  guint button_state = 0;
+
+  if (mir_pointer_event_button_state (event, mir_pointer_button_primary))
+    button_state |= mir_pointer_button_primary;
+  if (mir_pointer_event_button_state (event, mir_pointer_button_secondary))
+    button_state |= mir_pointer_button_secondary;
+  if (mir_pointer_event_button_state (event, mir_pointer_button_tertiary))
+    button_state |= mir_pointer_button_tertiary;
+  if (mir_pointer_event_button_state (event, mir_pointer_button_back))
+    button_state |= mir_pointer_button_back;
+  if (mir_pointer_event_button_state (event, mir_pointer_button_forward))
+    button_state |= mir_pointer_button_forward;
+
+  return button_state;
 }
 
 static void
-handle_motion_event (GdkWindow *window, const MirMotionEvent *event)
+handle_motion_event (GdkWindow *window, const MirInputEvent *event)
 {
+  const MirPointerEvent *pointer_event = mir_input_event_get_pointer_event (event);
   GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
   gdouble x, y;
   gboolean cursor_inside;
-  MirMotionButton button_state;
+  guint button_state;
   guint modifier_state;
   guint32 event_time;
   GdkEventType event_type;
-  MirMotionButton changed_button_state;
-
-  _gdk_mir_window_impl_get_cursor_state (impl, &x, &y, &cursor_inside, &button_state);
-  if (event->pointer_count > 0)
-    {
-      x = event->pointer_coordinates[0].x;
-      y = event->pointer_coordinates[0].y;
-    }
-  modifier_state = get_modifier_state (event->modifiers, event->button_state);
-  event_time = NANO_TO_MILLI (event->event_time);
-
-  /* TODO: Remove once we have proper transient window support. */
-  if (event->action == mir_motion_action_hover_exit)
-    {
-      LeaveInfo info;
-
-      info.x = x;
-      info.y = y;
-      info.time = event_time;
-      info.except = window;
-
-      /* Leave all transient children from leaf to root, except the root since we do it later. */
-      _gdk_mir_window_transient_children_foreach (window, leave_windows_except, &info);
-    }
-  else
-    {
-      LeaveInfo info;
-
-      info.x = x;
-      info.y = y;
-      info.time = event_time;
-      info.except = _gdk_mir_window_get_visible_transient_child (window, x, y, &x, &y);
-
-      /* Leave all transient children from leaf to root, except the pointer window since we enter it. */
-      _gdk_mir_window_transient_children_foreach (window, leave_windows_except, &info);
-
-      window = info.except;
+  guint changed_button_state;
 
-      if (window)
-        {
-          /* Enter the pointer window. */
-          gboolean cursor_inside_pointer_window;
-
-          impl = GDK_MIR_WINDOW_IMPL (window->impl);
-          _gdk_mir_window_impl_get_cursor_state (impl, NULL, NULL, &cursor_inside_pointer_window, NULL);
+  if (!pointer_event)
+    return;
 
-          if (!cursor_inside_pointer_window)
-            {
-              generate_crossing_event (window, GDK_ENTER_NOTIFY, x, y, event_time);
-              _gdk_mir_window_impl_set_cursor_state (impl, x, y, TRUE, event->button_state);
-            }
-        }
-    }
+  _gdk_mir_window_impl_get_cursor_state (impl, &x, &y, &cursor_inside, &button_state);
+  modifier_state = get_modifier_state (mir_pointer_event_modifiers (pointer_event), mir_pointer_event_get_button_state (pointer_event));
+  event_time = NANO_TO_MILLI (mir_input_event_get_event_time (event));
 
   if (window)
     {
+      gdouble new_x;
+      gdouble new_y;
+      gdouble hscroll;
+      gdouble vscroll;
+
       /* Update which window has focus */
       _gdk_mir_pointer_set_location (get_pointer (window), x, y, window, modifier_state);
-      switch (event->action)
+      switch (mir_pointer_event_action (pointer_event))
         {
-        case mir_motion_action_down:
-        case mir_motion_action_up:
-          event_type = event->action == mir_motion_action_down ? GDK_BUTTON_PRESS : GDK_BUTTON_RELEASE;
-          changed_button_state = button_state ^ event->button_state;
-          if (changed_button_state == 0 || (changed_button_state & mir_motion_button_primary) != 0)
+        case mir_pointer_action_button_up:
+        case mir_pointer_action_button_down:
+          event_type = mir_pointer_event_action (pointer_event) == mir_pointer_action_button_down ? GDK_BUTTON_PRESS : GDK_BUTTON_RELEASE;
+          changed_button_state = button_state ^ mir_pointer_event_get_button_state (pointer_event);
+          if (changed_button_state == 0 || (changed_button_state & mir_pointer_button_primary) != 0)
             generate_button_event (window, event_type, x, y, GDK_BUTTON_PRIMARY, modifier_state, event_time);
-          if ((changed_button_state & mir_motion_button_secondary) != 0)
+          if ((changed_button_state & mir_pointer_button_secondary) != 0)
             generate_button_event (window, event_type, x, y, GDK_BUTTON_SECONDARY, modifier_state, event_time);
-          if ((changed_button_state & mir_motion_button_tertiary) != 0)
+          if ((changed_button_state & mir_pointer_button_tertiary) != 0)
             generate_button_event (window, event_type, x, y, GDK_BUTTON_MIDDLE, modifier_state, event_time);
-          button_state = event->button_state;
+          button_state = mir_pointer_event_get_button_state (pointer_event);
           break;
-        case mir_motion_action_scroll:
-          generate_scroll_event (window, x, y, event->pointer_coordinates[0].hscroll, event->pointer_coordinates[0].vscroll, modifier_state, event_time);
+        case mir_pointer_action_motion:
+          new_x = mir_pointer_event_axis_value (pointer_event, mir_pointer_axis_x);
+          new_y = mir_pointer_event_axis_value (pointer_event, mir_pointer_axis_y);
+          hscroll = mir_pointer_event_axis_value (pointer_event, mir_pointer_axis_hscroll);
+          vscroll = mir_pointer_event_axis_value (pointer_event, mir_pointer_axis_vscroll);
+
+          if (ABS (hscroll) > 0.5 || ABS (vscroll) > 0.5)
+            generate_scroll_event (window, x, y, hscroll, vscroll, modifier_state, event_time);
+          if (ABS (new_x - x) > 0.5 || ABS (new_y - y) > 0.5)
+            {
+              generate_motion_event (window, new_x, new_y, modifier_state, event_time);
+              x = new_x;
+              y = new_y;
+            }
+
           break;
-        case mir_motion_action_move: // move with button
-        case mir_motion_action_hover_move: // move without button
-          generate_motion_event (window, x, y, modifier_state, event_time);
+        case mir_pointer_action_enter:
+          if (!cursor_inside)
+            {
+              cursor_inside = TRUE;
+              generate_crossing_event (window, GDK_ENTER_NOTIFY, x, y, event_time);
+            }
           break;
-        case mir_motion_action_hover_exit:
+        case mir_pointer_action_leave:
           if (cursor_inside)
             {
               cursor_inside = FALSE;
               generate_crossing_event (window, GDK_LEAVE_NOTIFY, x, y, event_time);
             }
           break;
+        default:
+          break;
         }
 
       _gdk_mir_window_impl_set_cursor_state (impl, x, y, cursor_inside, button_state);
@@ -439,20 +412,56 @@ static void
 handle_surface_event (GdkWindow *window, const MirSurfaceEvent *event)
 {
   GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
+  MirSurfaceState state;
 
-  switch (event->attrib)
+  switch (mir_surface_event_get_attribute (event))
     {
     case mir_surface_attrib_type:
-      _gdk_mir_window_impl_set_surface_type (impl, event->value);
+      _gdk_mir_window_impl_set_surface_type (impl, mir_surface_event_get_attribute_value (event));
       break;
     case mir_surface_attrib_state:
-      _gdk_mir_window_impl_set_surface_state (impl, event->value);
-      // FIXME: notify
+      state = mir_surface_event_get_attribute_value (event);
+      _gdk_mir_window_impl_set_surface_state (impl, state);
+
+      switch (state)
+        {
+        case mir_surface_state_restored:
+        case mir_surface_state_hidden:
+          gdk_synthesize_window_state (window,
+                                       GDK_WINDOW_STATE_ICONIFIED |
+                                       GDK_WINDOW_STATE_MAXIMIZED |
+                                       GDK_WINDOW_STATE_FULLSCREEN,
+                                       0);
+          break;
+        case mir_surface_state_minimized:
+          gdk_synthesize_window_state (window,
+                                       GDK_WINDOW_STATE_MAXIMIZED |
+                                       GDK_WINDOW_STATE_FULLSCREEN,
+                                       GDK_WINDOW_STATE_ICONIFIED);
+          break;
+        case mir_surface_state_maximized:
+        case mir_surface_state_vertmaximized:
+        case mir_surface_state_horizmaximized:
+          gdk_synthesize_window_state (window,
+                                       GDK_WINDOW_STATE_ICONIFIED |
+                                       GDK_WINDOW_STATE_FULLSCREEN,
+                                       GDK_WINDOW_STATE_MAXIMIZED);
+          break;
+        case mir_surface_state_fullscreen:
+          gdk_synthesize_window_state (window,
+                                       GDK_WINDOW_STATE_ICONIFIED |
+                                       GDK_WINDOW_STATE_MAXIMIZED,
+                                       GDK_WINDOW_STATE_FULLSCREEN);
+          break;
+        default:
+          break;
+        }
+
       break;
     case mir_surface_attrib_swapinterval:
       break;
     case mir_surface_attrib_focus:
-      generate_focus_event (window, event->value != 0);
+      generate_focus_event (window, mir_surface_event_get_attribute_value (event) != 0);
       break;
     default:
       break;
@@ -478,11 +487,11 @@ static void
 handle_resize_event (GdkWindow            *window,
                      const MirResizeEvent *event)
 {
-  window->width = event->width;
-  window->height = event->height;
+  window->width = mir_resize_event_get_width (event);
+  window->height = mir_resize_event_get_height (event);
   _gdk_window_update_size (window);
 
-  generate_configure_event (window, event->width, event->height);
+  generate_configure_event (window, mir_resize_event_get_width (event), mir_resize_event_get_height (event));
 }
 
 static void
@@ -496,7 +505,7 @@ handle_close_event (GdkWindow                  *window,
 typedef struct
 {
   GdkWindow *window;
-  MirEvent event;
+  MirEvent *event;
 } EventData;
 
 static void
@@ -504,20 +513,39 @@ gdk_mir_event_source_queue_event (GdkDisplay     *display,
                                   GdkWindow      *window,
                                   const MirEvent *event)
 {
+  const MirInputEvent *input_event;
+
   // FIXME: Only generate events if the window wanted them?
-  switch (event->type)
+  switch (mir_event_get_type (event))
     {
+    case mir_event_type_input:
+      input_event = mir_event_get_input_event (event);
+
+      switch (mir_input_event_get_type (input_event))
+        {
+        case mir_input_event_type_key:
+          handle_key_event (window, input_event);
+          break;
+        case mir_input_event_type_touch:
+          handle_motion_event (window, input_event);
+          break;
+        case mir_input_event_type_pointer:
+          handle_motion_event (window, input_event);
+          break;
+        }
+
+      break;
     case mir_event_type_key:
-      handle_key_event (window, &event->key);
+      handle_key_event (window, mir_event_get_input_event (event));
       break;
     case mir_event_type_motion:
-      handle_motion_event (window, &event->motion);
+      handle_motion_event (window, mir_event_get_input_event (event));
       break;
     case mir_event_type_surface:
-      handle_surface_event (window, &event->surface);
+      handle_surface_event (window, mir_event_get_surface_event (event));
       break;
     case mir_event_type_resize:
-      handle_resize_event (window, &event->resize);
+      handle_resize_event (window, mir_event_get_resize_event (event));
       break;
     case mir_event_type_prompt_session_state_change:
       // FIXME?
@@ -526,10 +554,10 @@ gdk_mir_event_source_queue_event (GdkDisplay     *display,
       // FIXME?
       break;
     case mir_event_type_close_surface:
-      handle_close_event (window, &event->close_surface);
+      handle_close_event (window, mir_event_get_close_surface_event (event));
       break;
     default:
-      g_warning ("Ignoring unknown Mir event %d", event->type);
+      g_warning ("Ignoring unknown Mir event %d", mir_event_get_type (event));
       // FIXME?
       break;
     }
@@ -551,6 +579,7 @@ static void
 gdk_mir_queued_event_free (GdkMirQueuedEvent *event)
 {
   _gdk_mir_window_reference_unref (event->window_ref);
+  mir_event_unref (event->event);
   g_slice_free (GdkMirQueuedEvent, event);
 }
 
@@ -569,9 +598,9 @@ gdk_mir_event_source_convert_events (GdkMirEventSource *source)
       if (window != NULL)
         {
           if (source->log_events)
-            _gdk_mir_print_event (&event->event);
+            _gdk_mir_print_event (event->event);
 
-          gdk_mir_event_source_queue_event (source->display, window, &event->event);
+          gdk_mir_event_source_queue_event (source->display, window, event->event);
         }
       else
         g_warning ("window was destroyed before event arrived...");
@@ -735,7 +764,7 @@ _gdk_mir_event_source_queue (GdkMirWindowReference *window_ref,
   queued_event = g_slice_new (GdkMirQueuedEvent);
   g_atomic_int_inc (&window_ref->ref_count);
   queued_event->window_ref = window_ref;
-  queued_event->event = *event;
+  queued_event->event = mir_event_ref (event);
 
   g_mutex_lock (&source->mir_event_lock);
   g_queue_push_tail (&source->mir_events, queued_event);
diff --git a/gdk/mir/gdkmirscreen.c b/gdk/mir/gdkmirscreen.c
index e29ddb3..d31c5a4 100644
--- a/gdk/mir/gdkmirscreen.c
+++ b/gdk/mir/gdkmirscreen.c
@@ -203,7 +203,7 @@ get_output (GdkScreen *screen, gint monitor_num)
 static gint
 gdk_mir_screen_get_width (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_get_width\n");
+  //g_printerr ("gdk_mir_screen_get_width\n");
   gint width, height;
   get_screen_size (GDK_MIR_SCREEN (screen)->display_config, &width, &height);
   return width;
@@ -212,7 +212,7 @@ gdk_mir_screen_get_width (GdkScreen *screen)
 static gint
 gdk_mir_screen_get_height (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_get_height\n");
+  //g_printerr ("gdk_mir_screen_get_height\n");
   gint width, height;
   get_screen_size (GDK_MIR_SCREEN (screen)->display_config, &width, &height);
   return height;
@@ -221,7 +221,7 @@ gdk_mir_screen_get_height (GdkScreen *screen)
 static gint
 gdk_mir_screen_get_width_mm (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_get_width_mm\n");
+  //g_printerr ("gdk_mir_screen_get_width_mm\n");
   gint width, height;
   get_screen_size_mm (GDK_MIR_SCREEN (screen)->display_config, &width, &height);
   return width;
@@ -230,7 +230,7 @@ gdk_mir_screen_get_width_mm (GdkScreen *screen)
 static gint
 gdk_mir_screen_get_height_mm (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_get_height_mm\n");
+  //g_printerr ("gdk_mir_screen_get_height_mm\n");
   gint width, height;
   get_screen_size_mm (GDK_MIR_SCREEN (screen)->display_config, &width, &height);
   return height;
@@ -293,7 +293,7 @@ gdk_mir_screen_get_n_monitors (GdkScreen *screen)
 static gint
 gdk_mir_screen_get_primary_monitor (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_get_primary_monitor\n");
+  //g_printerr ("gdk_mir_screen_get_primary_monitor\n");
   return 0; //?
 }
 
@@ -301,7 +301,7 @@ static gint
 gdk_mir_screen_get_monitor_width_mm	(GdkScreen *screen,
                                      gint       monitor_num)
 {
-  g_printerr ("gdk_mir_screen_get_monitor_width_mm (%d)\n", monitor_num);
+  //g_printerr ("gdk_mir_screen_get_monitor_width_mm (%d)\n", monitor_num);
   MirDisplayOutput *output = get_output (screen, monitor_num);
   return output ? output->physical_width_mm : 0;
 }
@@ -310,7 +310,7 @@ static gint
 gdk_mir_screen_get_monitor_height_mm (GdkScreen *screen,
                                       gint       monitor_num)
 {
-  g_printerr ("gdk_mir_screen_get_monitor_height_mm (%d)\n", monitor_num);
+  //g_printerr ("gdk_mir_screen_get_monitor_height_mm (%d)\n", monitor_num);
   MirDisplayOutput *output = get_output (screen, monitor_num);
   return output ? output->physical_height_mm : 0;
 }
@@ -319,7 +319,7 @@ static gchar *
 gdk_mir_screen_get_monitor_plug_name (GdkScreen *screen,
                                       gint       monitor_num)
 {
-  g_printerr ("gdk_mir_screen_get_monitor_plug_name (%d)\n", monitor_num);
+  //g_printerr ("gdk_mir_screen_get_monitor_plug_name (%d)\n", monitor_num);
   MirDisplayOutput *output = get_output (screen, monitor_num);
 
   if (output)
@@ -399,7 +399,7 @@ gdk_mir_screen_get_monitor_workarea (GdkScreen    *screen,
 static GList *
 gdk_mir_screen_list_visuals (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_list_visuals\n");
+  //g_printerr ("gdk_mir_screen_list_visuals\n");
   return g_list_append (NULL, GDK_MIR_SCREEN (screen)->visual);
 }
 
@@ -428,21 +428,21 @@ gdk_mir_screen_is_composited (GdkScreen *screen)
 static gchar *
 gdk_mir_screen_make_display_name (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_make_display_name\n");
+  //g_printerr ("gdk_mir_screen_make_display_name\n");
   return NULL; // FIXME
 }
 
 static GdkWindow *
 gdk_mir_screen_get_active_window (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_get_active_window\n");
+  //g_printerr ("gdk_mir_screen_get_active_window\n");
   return NULL; // FIXME
 }
 
 static GList *
 gdk_mir_screen_get_window_stack (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_get_window_stack\n");
+  //g_printerr ("gdk_mir_screen_get_window_stack\n");
   return NULL; // FIXME
 }
 
@@ -450,7 +450,7 @@ static void
 gdk_mir_screen_broadcast_client_message (GdkScreen *screen,
                                          GdkEvent  *event)
 {
-  g_printerr ("gdk_mir_screen_broadcast_client_message\n");
+  //g_printerr ("gdk_mir_screen_broadcast_client_message\n");
   // FIXME
 }
 
@@ -673,21 +673,21 @@ gdk_mir_screen_get_setting (GdkScreen   *screen,
 static gint
 gdk_mir_screen_visual_get_best_depth (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_visual_get_best_depth\n");
+  //g_printerr ("gdk_mir_screen_visual_get_best_depth\n");
   return VISUAL_DEPTH;
 }
 
 static GdkVisualType
 gdk_mir_screen_visual_get_best_type (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_visual_get_best_type\n");
+  //g_printerr ("gdk_mir_screen_visual_get_best_type\n");
   return VISUAL_TYPE;
 }
 
 static GdkVisual*
 gdk_mir_screen_visual_get_best (GdkScreen *screen)
 {
-  g_printerr ("gdk_mir_screen_visual_get_best\n");
+  //g_printerr ("gdk_mir_screen_visual_get_best\n");
   return GDK_MIR_SCREEN (screen)->visual;
 }
 
@@ -695,7 +695,7 @@ static GdkVisual*
 gdk_mir_screen_visual_get_best_with_depth (GdkScreen *screen,
                                            gint       depth)
 {
-  g_printerr ("gdk_mir_screen_visual_get_best_with_depth (%d)\n", depth);
+  //g_printerr ("gdk_mir_screen_visual_get_best_with_depth (%d)\n", depth);
   return GDK_MIR_SCREEN (screen)->visual;
 }
 
@@ -703,7 +703,7 @@ static GdkVisual*
 gdk_mir_screen_visual_get_best_with_type (GdkScreen     *screen,
                                           GdkVisualType  visual_type)
 {
-  g_printerr ("gdk_mir_screen_visual_get_best_with_type (%d)\n", visual_type);
+  //g_printerr ("gdk_mir_screen_visual_get_best_with_type (%d)\n", visual_type);
   return GDK_MIR_SCREEN (screen)->visual;
 }
 
@@ -712,7 +712,7 @@ gdk_mir_screen_visual_get_best_with_both (GdkScreen     *screen,
                                           gint           depth,
                                           GdkVisualType  visual_type)
 {
-  g_printerr ("gdk_mir_screen_visual_get_best_with_both\n");
+  //g_printerr ("gdk_mir_screen_visual_get_best_with_both\n");
   return GDK_MIR_SCREEN (screen)->visual;
 }
 
@@ -721,7 +721,7 @@ gdk_mir_screen_query_depths (GdkScreen  *screen,
                              gint      **depths,
                              gint       *count)
 {
-  g_printerr ("gdk_mir_screen_query_depths\n");
+  //g_printerr ("gdk_mir_screen_query_depths\n");
   static gint supported_depths[] = { VISUAL_DEPTH };
   *depths = supported_depths;
   *count = 1;
@@ -732,7 +732,7 @@ gdk_mir_screen_query_visual_types (GdkScreen      *screen,
                                    GdkVisualType **visual_types,
                                    gint           *count)
 {
-  g_printerr ("gdk_mir_screen_query_visual_types\n");
+  //g_printerr ("gdk_mir_screen_query_visual_types\n");
   static GdkVisualType supported_visual_types[] = { VISUAL_TYPE };
   *visual_types = supported_visual_types;
   *count = 1;
diff --git a/gdk/mir/gdkmirwindowimpl.c b/gdk/mir/gdkmirwindowimpl.c
index 666a1d0..ba2e70f 100644
--- a/gdk/mir/gdkmirwindowimpl.c
+++ b/gdk/mir/gdkmirwindowimpl.c
@@ -46,11 +46,8 @@ struct _GdkMirWindowImpl
   gint transient_x;
   gint transient_y;
 
-  /* Child windows (e.g. tooltips) */
-  GList *transient_children;
-
   /* Desired surface attributes */
-  MirSurfaceType surface_type;
+  GdkWindowTypeHint type_hint;
   MirSurfaceState surface_state;
 
   /* Pattern for background */
@@ -59,7 +56,7 @@ struct _GdkMirWindowImpl
   /* Current button state for checking which buttons are being pressed / released */
   gdouble x;
   gdouble y;
-  MirMotionButton button_state;
+  guint button_state;
 
   /* Surface being rendered to (only exists when window visible) */
   MirSurface *surface;
@@ -71,7 +68,6 @@ struct _GdkMirWindowImpl
   EGLSurface egl_surface;
 
   /* Dummy MIR and EGL surfaces */
-  MirSurface *dummy_surface;
   EGLSurface dummy_egl_surface;
 
   /* TRUE if the window can be seen */
@@ -103,9 +99,9 @@ _gdk_mir_window_impl_set_surface_state (GdkMirWindowImpl *impl, MirSurfaceState
 }
 
 void
-_gdk_mir_window_impl_set_surface_type (GdkMirWindowImpl *impl, MirSurfaceType type)
+_gdk_mir_window_impl_set_surface_type (GdkMirWindowImpl *impl,
+                                       MirSurfaceType    type)
 {
-  impl->surface_type = type;
 }
 
 void
@@ -113,7 +109,7 @@ _gdk_mir_window_impl_set_cursor_state (GdkMirWindowImpl *impl,
                                        gdouble x,
                                        gdouble y,
                                        gboolean cursor_inside,
-                                       MirMotionButton button_state)
+                                       guint button_state)
 {
   impl->x = x;
   impl->y = y;
@@ -126,7 +122,7 @@ _gdk_mir_window_impl_get_cursor_state (GdkMirWindowImpl *impl,
                                        gdouble *x,
                                        gdouble *y,
                                        gboolean *cursor_inside,
-                                       MirMotionButton *button_state)
+                                       guint *button_state)
 {
   if (x)
     *x = impl->x;
@@ -141,7 +137,7 @@ _gdk_mir_window_impl_get_cursor_state (GdkMirWindowImpl *impl,
 static void
 gdk_mir_window_impl_init (GdkMirWindowImpl *impl)
 {
-  impl->surface_type = mir_surface_type_normal;
+  impl->type_hint = GDK_WINDOW_TYPE_HINT_NORMAL;
   impl->surface_state = mir_surface_state_unknown;
 }
 
@@ -158,18 +154,6 @@ set_surface_state (GdkMirWindowImpl *impl,
 }
 
 static void
-set_surface_type (GdkMirWindowImpl *impl,
-                  MirSurfaceType type)
-{
-  if (impl->surface_type == type)
-    return;
-
-  impl->surface_type = type;
-  if (impl->surface)
-    mir_surface_set_type (impl->surface, type);
-}
-
-static void
 event_cb (MirSurface     *surface,
           const MirEvent *event,
           void           *context)
@@ -179,18 +163,87 @@ event_cb (MirSurface     *surface,
 
 static MirSurface *
 create_mir_surface (GdkDisplay *display,
+                    GdkWindow *parent,
+                    gint x,
+                    gint y,
                     gint width,
                     gint height,
+                    GdkWindowTypeHint type,
                     MirBufferUsage buffer_usage)
 {
+  GdkMirWindowImpl *parent_impl;
   MirSurfaceSpec *spec;
   MirConnection *connection;
   MirPixelFormat format;
   MirSurface *surface;
+  MirRectangle rect;
 
   connection = gdk_mir_display_get_mir_connection (display);
   format = _gdk_mir_display_get_pixel_format (display, buffer_usage);
-  spec = mir_connection_create_spec_for_normal_surface (connection, width, height, format);
+
+  if (parent)
+    parent_impl = GDK_MIR_WINDOW_IMPL (parent->impl);
+  else
+    parent_impl = NULL;
+
+  switch (type)
+    {
+      case GDK_WINDOW_TYPE_HINT_DIALOG:
+      case GDK_WINDOW_TYPE_HINT_DOCK:
+        spec = mir_connection_create_spec_for_dialog (connection,
+                                                      width,
+                                                      height,
+                                                      format);
+        break;
+      case GDK_WINDOW_TYPE_HINT_MENU:
+      case GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU:
+      case GDK_WINDOW_TYPE_HINT_POPUP_MENU:
+      case GDK_WINDOW_TYPE_HINT_TOOLBAR:
+      case GDK_WINDOW_TYPE_HINT_COMBO:
+        rect.left = x;
+        rect.top = y;
+        rect.width = 1;
+        rect.height = 1;
+        spec = mir_connection_create_spec_for_menu (connection,
+                                                    width,
+                                                    height,
+                                                    format,
+                                                    parent_impl ? parent_impl->surface : NULL,
+                                                    &rect,
+                                                    mir_edge_attachment_any);
+        break;
+      case GDK_WINDOW_TYPE_HINT_SPLASHSCREEN:
+      case GDK_WINDOW_TYPE_HINT_UTILITY:
+        spec = mir_connection_create_spec_for_modal_dialog (connection,
+                                                            width,
+                                                            height,
+                                                            format,
+                                                            parent_impl ? parent_impl->surface : NULL);
+        break;
+      case GDK_WINDOW_TYPE_HINT_DND:
+      case GDK_WINDOW_TYPE_HINT_TOOLTIP:
+      case GDK_WINDOW_TYPE_HINT_NOTIFICATION:
+        rect.left = x;
+        rect.top = y;
+        rect.width = 1;
+        rect.height = 1;
+        spec = mir_connection_create_spec_for_tooltip (connection,
+                                                       width,
+                                                       height,
+                                                       format,
+                                                       parent_impl ? parent_impl->surface : NULL,
+                                                       &rect);
+        break;
+      case GDK_WINDOW_TYPE_HINT_NORMAL:
+      case GDK_WINDOW_TYPE_HINT_DESKTOP:
+      default:
+        spec = mir_connection_create_spec_for_normal_surface (connection,
+                                                              width,
+                                                              height,
+                                                              format);
+        break;
+    }
+
   mir_surface_spec_set_name (spec, g_get_prgname ());
   mir_surface_spec_set_buffer_usage (spec, buffer_usage);
   surface = mir_surface_create_sync (spec);
@@ -199,13 +252,41 @@ create_mir_surface (GdkDisplay *display,
   return surface;
 }
 
-/* TODO: Remove once we have proper transient window support. */
-static gboolean
-should_render_in_parent (GdkWindow *window)
+static GdkDevice *
+get_pointer (GdkWindow *window)
 {
-  GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
+  return gdk_device_manager_get_client_pointer (gdk_display_get_device_manager (gdk_window_get_display (window)));
+}
+
+static void
+send_event (GdkWindow *window, GdkDevice *device, GdkEvent *event)
+{
+  GdkDisplay *display;
+  GList *node;
+
+  gdk_event_set_device (event, device);
+  gdk_event_set_source_device (event, device);
+  gdk_event_set_screen (event, gdk_display_get_screen (gdk_window_get_display (window), 0));
+  event->any.window = g_object_ref (window);
 
-  return impl->transient_for && gdk_window_get_window_type (window) != GDK_WINDOW_TOPLEVEL;
+  display = gdk_window_get_display (window);
+  node = _gdk_event_queue_append (display, event);
+  _gdk_windowing_got_event (display, node, event, _gdk_display_get_next_serial (display));
+}
+
+static void
+generate_configure_event (GdkWindow *window,
+                          gint       width,
+                          gint       height)
+{
+  GdkEvent *event;
+
+  event = gdk_event_new (GDK_CONFIGURE);
+  event->configure.send_event = FALSE;
+  event->configure.width = width;
+  event->configure.height = height;
+
+  send_event (window, get_pointer (window), event);
 }
 
 static void
@@ -213,10 +294,9 @@ ensure_surface_full (GdkWindow *window,
                      MirBufferUsage buffer_usage)
 {
   GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
-  MirEventDelegate event_delegate = { event_cb, NULL };
   GdkMirWindowReference *window_ref;
 
-  if (impl->surface || should_render_in_parent (window))
+  if (impl->surface)
     return;
 
   /* no destroy notify -- we must leak for now
@@ -224,25 +304,29 @@ ensure_surface_full (GdkWindow *window,
    */
   window_ref = _gdk_mir_event_source_get_window_reference (window);
 
-  event_delegate.context = window_ref;
-
-  impl->surface = create_mir_surface (gdk_window_get_display (window),
+  impl->surface = create_mir_surface (gdk_window_get_display (window), impl->transient_for,
+                                      impl->transient_x, impl->transient_y,
                                       window->width, window->height,
+                                      impl->type_hint,
                                       buffer_usage);
 
-  MirEvent resize_event;
+  /* FIXME: can't make an initial resize event */
+  // MirEvent *resize_event;
 
   /* Send the initial configure with the size the server gave... */
+  /* FIXME: can't make an initial resize event */
+  /*
   resize_event.resize.type = mir_event_type_resize;
   resize_event.resize.surface_id = 0;
   resize_event.resize.width = window->width;
   resize_event.resize.height = window->height;
 
   _gdk_mir_event_source_queue (window_ref, &resize_event);
+  */
 
-  mir_surface_set_event_handler (impl->surface, &event_delegate); // FIXME: Ignore some events until shown
-  set_surface_type (impl, impl->surface_type);
-  set_surface_state (impl, impl->surface_state);
+  generate_configure_event (window, window->width, window->height);
+
+  mir_surface_set_event_handler (impl->surface, event_cb, window_ref); // FIXME: Ignore some events until shown
 }
 
 static void
@@ -280,66 +364,18 @@ ensure_no_surface (GdkWindow *window)
           eglDestroySurface (egl_display, impl->dummy_egl_surface);
           impl->dummy_egl_surface = NULL;
         }
-
-      g_clear_pointer (&impl->dummy_surface, mir_surface_release_sync);
     }
 
   g_clear_pointer(&impl->surface, mir_surface_release_sync);
 }
 
 static void
-redraw_transient (GdkWindow *window)
-{
-  GdkRectangle r;
-  r.x = window->x;
-  r.y = window->y;
-  r.width = window->width;
-  r.height = window->height;
-  gdk_window_invalidate_rect (GDK_MIR_WINDOW_IMPL (window->impl)->transient_for, &r, FALSE);
-}
-
-static void
 send_buffer (GdkWindow *window)
 {
   GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
 
-  /* Transient windows draw onto parent instead */
-  if (should_render_in_parent (window))
-    {
-      redraw_transient (window);
-      return;
-    }
-
-  /* Composite transient windows over this one */
-  if (impl->transient_children)
-    {
-      cairo_surface_t *surface;
-      cairo_t *c;
-      GList *link;
-
-      surface = gdk_mir_window_impl_ref_cairo_surface (window);
-      c = cairo_create (surface);
-
-      for (link = impl->transient_children; link; link = link->next)
-        {
-          GdkWindow *child_window = link->data;
-          GdkMirWindowImpl *child_impl = GDK_MIR_WINDOW_IMPL (child_window->impl);
-
-          /* Skip children not yet drawn to */
-          if (!child_impl->cairo_surface)
-            continue;
-
-          cairo_set_source_surface (c, child_impl->cairo_surface, child_window->x, child_window->y);
-          cairo_rectangle (c, child_window->x, child_window->y, child_window->width, child_window->height);
-          cairo_fill (c);
-        }
-
-      cairo_destroy (c);
-      cairo_surface_destroy (surface);
-    }
-
   /* Send the completed buffer to Mir */
-  mir_surface_swap_buffers_sync (impl->surface);
+  mir_buffer_stream_swap_buffers_sync (mir_surface_get_buffer_stream (impl->surface));
 
   /* The Cairo context is no longer valid */
   g_clear_pointer (&impl->cairo_surface, cairo_surface_destroy);
@@ -362,7 +398,7 @@ gdk_mir_window_impl_ref_cairo_surface (GdkWindow *window)
     }
 
   /* Transient windows get rendered into a buffer and copied onto their parent */
-  if (should_render_in_parent (window) || window->gl_paint_context)
+  if (window->gl_paint_context)
     {
       cairo_surface = cairo_image_surface_create (pixel_format, window->width, window->height);
     }
@@ -370,7 +406,7 @@ gdk_mir_window_impl_ref_cairo_surface (GdkWindow *window)
     {
       ensure_surface (window);
 
-      mir_surface_get_graphics_region (impl->surface, &region);
+      mir_buffer_stream_get_graphics_region (mir_surface_get_buffer_stream (impl->surface), &region);
       g_assert (region.pixel_format == mir_pixel_format_argb_8888);
 
       cairo_surface = cairo_image_surface_create_for_data ((unsigned char *) region.vaddr,
@@ -408,13 +444,6 @@ static void
 gdk_mir_window_impl_finalize (GObject *object)
 {
   GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (object);
-  GList *link;
-
-  for (link = impl->transient_children; link; link = link->next)
-    {
-      GdkWindow *window = link->data;
-      gdk_window_destroy (window);
-    }
 
   if (impl->background)
     cairo_pattern_destroy (impl->background);
@@ -422,7 +451,6 @@ gdk_mir_window_impl_finalize (GObject *object)
     mir_surface_release_sync (impl->surface);
   if (impl->cairo_surface)
     cairo_surface_destroy (impl->cairo_surface);
-  g_list_free (impl->transient_children);
 
   G_OBJECT_CLASS (gdk_mir_window_impl_parent_class)->finalize (object);
 }
@@ -459,9 +487,6 @@ gdk_mir_window_impl_hide (GdkWindow *window)
   impl->cursor_inside = FALSE;
   impl->visible = FALSE;
   ensure_no_surface (window);
-
-  if (should_render_in_parent (window))
-    redraw_transient (window);
 }
 
 static void
@@ -473,9 +498,6 @@ gdk_mir_window_impl_withdraw (GdkWindow *window)
   impl->cursor_inside = FALSE;
   impl->visible = FALSE;
   ensure_no_surface (window);
-
-  if (should_render_in_parent (window))
-    redraw_transient (window);
 }
 
 static void
@@ -529,19 +551,10 @@ gdk_mir_window_impl_move_resize (GdkWindow *window,
   GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
   gboolean recreate_surface = FALSE;
 
-  /* Redraw parent where we moved from */
-  if (should_render_in_parent (window))
-    redraw_transient (window);
-
   /* Transient windows can move wherever they want */
   if (with_move)
     {
-      if (should_render_in_parent (window))
-        {
-          window->x = x;
-          window->y = y;
-        }
-      else if (x != impl->transient_x || y != impl->transient_y)
+      if (x != impl->transient_x || y != impl->transient_y)
         {
           impl->transient_x = x;
           impl->transient_y = y;
@@ -563,10 +576,6 @@ gdk_mir_window_impl_move_resize (GdkWindow *window,
       ensure_no_surface (window);
       ensure_surface (window);
     }
-
-  /* Redraw parent where we moved to */
-  if (should_render_in_parent (window))
-    redraw_transient (window);
 }
 
 static void
@@ -602,7 +611,7 @@ gdk_mir_window_impl_reparent (GdkWindow *window,
                               gint       x,
                               gint       y)
 {
-  g_printerr ("gdk_mir_window_impl_reparent window=%p new-parent=%p\n", window, new_parent);
+  //g_printerr ("gdk_mir_window_impl_reparent window=%p new-parent=%p\n", window, new_parent);
   return FALSE;
 }
 
@@ -702,14 +711,14 @@ gdk_mir_window_impl_end_paint (GdkWindow *window)
 static cairo_region_t *
 gdk_mir_window_impl_get_shape (GdkWindow *window)
 {
-  g_printerr ("gdk_mir_window_impl_get_shape window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_get_shape window=%p\n", window);
   return NULL;
 }
 
 static cairo_region_t *
 gdk_mir_window_impl_get_input_shape (GdkWindow *window)
 {
-  g_printerr ("gdk_mir_window_impl_get_input_shape window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_get_input_shape window=%p\n", window);
   return NULL;
 }
 
@@ -719,7 +728,7 @@ gdk_mir_window_impl_shape_combine_region (GdkWindow            *window,
                                           gint                  offset_x,
                                           gint                  offset_y)
 {
-  g_printerr ("gdk_mir_window_impl_shape_combine_region window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_shape_combine_region window=%p\n", window);
 }
 
 static void
@@ -741,70 +750,32 @@ gdk_mir_window_impl_destroy (GdkWindow *window,
 
   impl->visible = FALSE;
   ensure_no_surface (window);
-
-  if (should_render_in_parent (window))
-    {
-      /* Redraw parent */
-      redraw_transient (window);
-
-      /* Remove from transient list */
-      GdkMirWindowImpl *parent_impl = GDK_MIR_WINDOW_IMPL (impl->transient_for->impl);
-      parent_impl->transient_children = g_list_remove (parent_impl->transient_children, window);
-    }
 }
 
 static void
 gdk_mir_window_impl_destroy_foreign (GdkWindow *window)
 {
-  g_printerr ("gdk_mir_window_impl_destroy_foreign window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_destroy_foreign window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_focus (GdkWindow *window,
                       guint32    timestamp)
 {
-  g_printerr ("gdk_mir_window_impl_focus window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_focus window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_set_type_hint (GdkWindow         *window,
                                    GdkWindowTypeHint  hint)
 {
-  MirSurfaceType mir_type = mir_surface_type_normal;
+  GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
 
-  switch (hint)
+  if (hint != impl->type_hint)
     {
-      case GDK_WINDOW_TYPE_HINT_NORMAL:
-      case GDK_WINDOW_TYPE_HINT_DOCK:
-      case GDK_WINDOW_TYPE_HINT_DESKTOP:
-        mir_type = mir_surface_type_normal;
-        break;
-      case GDK_WINDOW_TYPE_HINT_DIALOG:
-        mir_type = mir_surface_type_dialog;
-        break;
-      case GDK_WINDOW_TYPE_HINT_UTILITY:
-        mir_type = mir_surface_type_utility;
-        break;
-      case GDK_WINDOW_TYPE_HINT_MENU:
-      case GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU:
-      case GDK_WINDOW_TYPE_HINT_POPUP_MENU:
-      case GDK_WINDOW_TYPE_HINT_COMBO:
-        mir_type = mir_surface_type_menu;
-        break;
-      case GDK_WINDOW_TYPE_HINT_TOOLTIP:
-        mir_type = mir_surface_type_tip;
-        break;
-      case GDK_WINDOW_TYPE_HINT_SPLASHSCREEN:
-      case GDK_WINDOW_TYPE_HINT_DND:
-      case GDK_WINDOW_TYPE_HINT_NOTIFICATION:
-        mir_type = mir_surface_type_overlay;
-        break;
-      case GDK_WINDOW_TYPE_HINT_TOOLBAR:
-        mir_type = mir_surface_type_satellite;
-        break;
+      impl->type_hint = hint;
+      ensure_no_surface (window);
     }
-
-  set_surface_type (GDK_MIR_WINDOW_IMPL (window->impl), mir_type);
 }
 
 static GdkWindowTypeHint
@@ -812,29 +783,7 @@ gdk_mir_window_impl_get_type_hint (GdkWindow *window)
 {
   GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
 
-  switch (impl->surface_type)
-    {
-      case mir_surface_type_normal:
-      case mir_surface_type_freestyle:
-      case mir_surface_type_inputmethod:
-        return GDK_WINDOW_TYPE_HINT_NORMAL;
-      case mir_surface_type_utility:
-        return GDK_WINDOW_TYPE_HINT_UTILITY;
-      case mir_surface_type_dialog:
-        return GDK_WINDOW_TYPE_HINT_DIALOG;
-      case mir_surface_type_tip:
-        return GDK_WINDOW_TYPE_HINT_TOOLTIP;
-      case mir_surface_type_menu:
-        return GDK_WINDOW_TYPE_HINT_MENU;
-      case mir_surface_type_overlay:
-        return GDK_WINDOW_TYPE_HINT_NOTIFICATION;
-      case mir_surface_type_satellite:
-        return GDK_WINDOW_TYPE_HINT_TOOLBAR;
-      case mir_surface_types:
-        break;
-    }
-
-  return GDK_WINDOW_TYPE_HINT_NORMAL;
+  return impl->type_hint;
 }
 
 void
@@ -849,21 +798,21 @@ static void
 gdk_mir_window_impl_set_skip_taskbar_hint (GdkWindow *window,
                                            gboolean   skips_taskbar)
 {
-  g_printerr ("gdk_mir_window_impl_set_skip_taskbar_hint window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_skip_taskbar_hint window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_set_skip_pager_hint (GdkWindow *window,
                                          gboolean   skips_pager)
 {
-  g_printerr ("gdk_mir_window_impl_set_skip_pager_hint window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_skip_pager_hint window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_set_urgency_hint (GdkWindow *window,
                                       gboolean   urgent)
 {
-  g_printerr ("gdk_mir_window_impl_set_urgency_hint window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_urgency_hint window=%p\n", window);
 }
 
 static void
@@ -886,21 +835,21 @@ static void
 gdk_mir_window_impl_set_role (GdkWindow   *window,
                               const gchar *role)
 {
-  g_printerr ("gdk_mir_window_impl_set_role window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_role window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_set_startup_id (GdkWindow   *window,
                                     const gchar *startup_id)
 {
-  g_printerr ("gdk_mir_window_impl_set_startup_id window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_startup_id window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_set_transient_for (GdkWindow *window,
                                        GdkWindow *parent)
 {
-  g_printerr ("gdk_mir_window_impl_set_transient_for window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_transient_for window=%p\n", window);
   GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
 
   if (impl->transient_for == parent)
@@ -910,78 +859,20 @@ gdk_mir_window_impl_set_transient_for (GdkWindow *window,
 
   /* Link this window to the parent */
   impl->transient_for = parent;
-  if (should_render_in_parent (window))
-    {
-      GdkMirWindowImpl *parent_impl = GDK_MIR_WINDOW_IMPL (parent->impl);
-      parent_impl->transient_children = g_list_append (parent_impl->transient_children, window);
-
-      /* Move to where the client requested */
-      window->x = impl->transient_x;
-      window->y = impl->transient_y;
-
-      /* Remove surface if we had made one before this was set */
-      ensure_no_surface (window);
-
-      /* Redraw onto parent */
-      redraw_transient (window);
-    }
-}
-
-/* TODO: Remove once we have proper transient window support. */
-GdkWindow *
-_gdk_mir_window_get_visible_transient_child (GdkWindow *window,
-                                             gdouble    x,
-                                             gdouble    y,
-                                             gdouble   *out_x,
-                                             gdouble   *out_y)
-{
-  GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
-  GdkWindow *child = NULL;
-  GList *i;
-
-  x -= window->x;
-  y -= window->y;
-
-  if (x < 0 || x >= window->width || y < 0 || y >= window->height)
-    return NULL;
-
-  for (i = impl->transient_children; i && !child; i = i->next)
-    {
-      if (GDK_MIR_WINDOW_IMPL (GDK_WINDOW (i->data)->impl)->visible)
-        child = _gdk_mir_window_get_visible_transient_child (i->data, x, y, out_x, out_y);
-    }
-
-  if (child)
-    return child;
-
-  *out_x = x;
-  *out_y = y;
-
-  return window;
-}
-
-/* TODO: Remove once we have proper transient window support. */
-void
-_gdk_mir_window_transient_children_foreach (GdkWindow  *window,
-                                            void      (*func) (GdkWindow *, gpointer),
-                                            gpointer    user_data)
-{
-  GdkMirWindowImpl *impl = GDK_MIR_WINDOW_IMPL (window->impl);
-  g_list_foreach (impl->transient_children, (GFunc) func, user_data);
 }
 
 static void
 gdk_mir_window_impl_get_frame_extents (GdkWindow    *window,
                                        GdkRectangle *rect)
 {
-  g_printerr ("gdk_mir_window_impl_get_frame_extents window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_get_frame_extents window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_set_override_redirect (GdkWindow *window,
                                            gboolean   override_redirect)
 {
-  g_printerr ("gdk_mir_window_impl_set_override_redirect window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_override_redirect window=%p\n", window);
 }
 
 static void
@@ -1012,7 +903,7 @@ static void
 gdk_mir_window_impl_set_icon_name (GdkWindow   *window,
                                    const gchar *name)
 {
-  g_printerr ("gdk_mir_window_impl_set_icon_name window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_icon_name window=%p\n", window);
 }
 
 static void
@@ -1096,7 +987,7 @@ gdk_mir_window_impl_set_keep_below (GdkWindow *window,
 static GdkWindow *
 gdk_mir_window_impl_get_group (GdkWindow *window)
 {
-  g_printerr ("gdk_mir_window_impl_get_group window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_get_group window=%p\n", window);
   return NULL;
 }
 
@@ -1104,21 +995,21 @@ static void
 gdk_mir_window_impl_set_group (GdkWindow *window,
                                GdkWindow *leader)
 {
-  g_printerr ("gdk_mir_window_impl_set_group window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_group window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_set_decorations (GdkWindow       *window,
                                      GdkWMDecoration  decorations)
 {
-  g_printerr ("gdk_mir_window_impl_set_decorations window=%p decorations=%d\n", window, decorations);
+  //g_printerr ("gdk_mir_window_impl_set_decorations window=%p decorations=%d\n", window, decorations);
 }
 
 static gboolean
 gdk_mir_window_impl_get_decorations (GdkWindow       *window,
                                      GdkWMDecoration *decorations)
 {
-  g_printerr ("gdk_mir_window_impl_get_decorations window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_get_decorations window=%p\n", window);
   return FALSE;
 }
 
@@ -1126,7 +1017,7 @@ static void
 gdk_mir_window_impl_set_functions (GdkWindow     *window,
                                    GdkWMFunction  functions)
 {
-  g_printerr ("gdk_mir_window_impl_set_functions window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_functions window=%p\n", window);
 }
 
 static void
@@ -1138,7 +1029,7 @@ gdk_mir_window_impl_begin_resize_drag (GdkWindow     *window,
                                        gint           root_y,
                                        guint32        timestamp)
 {
-  g_printerr ("gdk_mir_window_impl_begin_resize_drag window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_begin_resize_drag window=%p\n", window);
 }
 
 static void
@@ -1149,19 +1040,19 @@ gdk_mir_window_impl_begin_move_drag (GdkWindow *window,
                                      gint       root_y,
                                      guint32    timestamp)
 {
-  g_printerr ("gdk_mir_window_impl_begin_move_drag window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_begin_move_drag window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_enable_synchronized_configure (GdkWindow *window)
 {
-  g_printerr ("gdk_mir_window_impl_enable_synchronized_configure window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_enable_synchronized_configure window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_configure_finished (GdkWindow *window)
 {
-  g_printerr ("gdk_mir_window_impl_configure_finished window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_configure_finished window=%p\n", window);
 }
 
 static void
@@ -1176,27 +1067,27 @@ static void
 gdk_mir_window_impl_set_composited (GdkWindow *window,
                                     gboolean   composited)
 {
-  g_printerr ("gdk_mir_window_impl_set_composited window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_set_composited window=%p\n", window);
 }
 
 static void
 gdk_mir_window_impl_destroy_notify (GdkWindow *window)
 {
-  g_printerr ("gdk_mir_window_impl_destroy_notify window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_destroy_notify window=%p\n", window);
 }
 
 static GdkDragProtocol
 gdk_mir_window_impl_get_drag_protocol (GdkWindow *window,
                                        GdkWindow **target)
 {
-  g_printerr ("gdk_mir_window_impl_get_drag_protocol window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_get_drag_protocol window=%p\n", window);
   return 0;
 }
 
 static void
 gdk_mir_window_impl_register_dnd (GdkWindow *window)
 {
-  g_printerr ("gdk_mir_window_impl_register_dnd window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_register_dnd window=%p\n", window);
 }
 
 static GdkDragContext *
@@ -1204,7 +1095,7 @@ gdk_mir_window_impl_drag_begin (GdkWindow *window,
                                 GdkDevice *device,
                                 GList     *targets)
 {
-  g_printerr ("gdk_mir_window_impl_drag_begin window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_drag_begin window=%p\n", window);
   return NULL;
 }
 
@@ -1228,7 +1119,7 @@ gdk_mir_window_impl_process_updates_recurse (GdkWindow      *window,
 static void
 gdk_mir_window_impl_sync_rendering (GdkWindow *window)
 {
-  g_printerr ("gdk_mir_window_impl_sync_rendering window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_sync_rendering window=%p\n", window);
   // FIXME: Only used for benchmarking
 }
 
@@ -1240,7 +1131,7 @@ gdk_mir_window_impl_simulate_key (GdkWindow       *window,
                                   GdkModifierType  modifiers,
                                   GdkEventType     key_pressrelease)
 {
-  g_printerr ("gdk_mir_window_impl_simulate_key window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_simulate_key window=%p\n", window);
   return FALSE;
 }
 
@@ -1252,7 +1143,7 @@ gdk_mir_window_impl_simulate_button (GdkWindow       *window,
                                      GdkModifierType  modifiers,
                                      GdkEventType     button_pressrelease)
 {
-  g_printerr ("gdk_mir_window_impl_simulate_button window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_simulate_button window=%p\n", window);
   return FALSE;
 }
 
@@ -1268,7 +1159,7 @@ gdk_mir_window_impl_get_property (GdkWindow   *window,
                                   gint        *actual_length,
                                   guchar     **data)
 {
-  g_printerr ("gdk_mir_window_impl_get_property window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_get_property window=%p\n", window);
   return FALSE;
 }
 
@@ -1281,7 +1172,7 @@ gdk_mir_window_impl_change_property (GdkWindow    *window,
                                      const guchar *data,
                                      gint          nelements)
 {
-  g_printerr ("gdk_mir_window_impl_change_property window=%p\n", window);
+  //g_printerr ("gdk_mir_window_impl_change_property window=%p\n", window);
 }
 
 static void
@@ -1508,7 +1399,7 @@ _gdk_mir_window_get_egl_surface (GdkWindow *window,
       ensure_surface_full (window, mir_buffer_usage_hardware);
 
       egl_display = _gdk_mir_display_get_egl_display (gdk_window_get_display (window));
-      egl_window = (EGLNativeWindowType) mir_surface_get_egl_native_window (impl->surface);
+      egl_window = (EGLNativeWindowType) mir_buffer_stream_get_egl_native_window (mir_surface_get_buffer_stream (impl->surface));
 
       impl->egl_surface =
         eglCreateWindowSurface (egl_display, config, egl_window, NULL);
@@ -1532,11 +1423,8 @@ _gdk_mir_window_get_dummy_egl_surface (GdkWindow *window,
       EGLNativeWindowType egl_window;
 
       display = gdk_window_get_display (window);
-      impl->dummy_surface = create_mir_surface (display, 1, 1,
-                                                mir_buffer_usage_hardware);
-
       egl_display = _gdk_mir_display_get_egl_display (display);
-      egl_window = (EGLNativeWindowType) mir_surface_get_egl_native_window (impl->surface);
+      egl_window = (EGLNativeWindowType) mir_buffer_stream_get_egl_native_window (mir_surface_get_buffer_stream (impl->surface));
 
       impl->dummy_egl_surface =
         eglCreateWindowSurface (egl_display, config, egl_window, NULL);
-- 
2.1.4

